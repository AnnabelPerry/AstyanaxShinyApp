}
}
candidates
# Evaluate fitness of each candidate to ensure you aren't picking a male with
# disproportionately low or high fitness
starting_fits <- GetFit(starting_pop, s)
### Introduce Fusions to SPECIFIC Individuals and Evolve #############
# Store final population at final generation of evolution
num_sims <- 10
pop_size <- 1000
gen_no <- 100
s <- 0.3
chiasm <- T
fus.type <- "Y"
mu <- 10^-14
fus.large <- F
fuse.bool <- F
for(indv in 1:length(starting_pop)){
if(sum(starting_pop[[indv]][,13]) == 1 & sum(starting_pop[[indv]][,28]) == 2 &
sum(starting_pop[[indv]][,28]) == 2){
candidates <- append(candidates, indv)
}
}
# Evaluate fitness of each candidate to ensure you aren't picking a male with
# disproportionately low or high fitness
starting_fits <- GetFit(starting_pop, s)
candidate_fits <- starting_fits[candidates]
hist(candidate_fits)
median(candidate_fits)
# Pick a random male with fitness near the middle of the distribution and
# introduce a Y-small fusion
choice <- sample(candidates[candidate_fits == median(candidate_fits)], size = 1)
starting_pop[[choice]][2, 25] <- 1
# Edit "Evolve()" to start with this population and NOT introduce any new fusions
EvolveStartingPopulation <- function(num_sims, pop, gen_no, s, chiasm, fus.type, mu, fus.large, fuse.bool){
# Initialize list of of lists of lists
res.outer <- vector(mode = "list", length = num_sims)
# Create iterator for the FOUR rows corresponding to the current gensim combo
gen_sims <- 1:4
for(sim in 1:num_sims){
print(paste("Simulation: ", sim, collapse = ""))
res.inner <- vector(mode = "list", length = gen_no)
# With each new simulation, you must REdefine the starting population
pop <- starting_pop
# Get a distribution of fitness effects
dfe <- GetDFE()
# For each generation in "gen_no"...
for(gen in 1:gen_no){
print(paste(c("Generation: ", gen), collapse = ""))
# Mutate the starting population
pop <- ActofGod(pop, dfe, fus.type, mu, fus.large, fuse.bool)
# Assess the fitness of the mutated population
fits <- GetFit(pop, s)
# Add population to output
res.inner[[gen]] <- pop
# Select parents based on the fitness
parents <- Maury(pop, fits, length(pop))
# Select gametes from these parents
gametes <- MakeGametes(pop, parents, chiasm=T)
# Breed the parents
pop <- MiracleOfLife(gametes)
# Move to next gen/sim combo
gen_sims <- gen_sims + 4
}
res.outer[[sim]] <- res.inner
}
# Output final populations after all sims and generations
return(res.outer)
}
# Run MULTIPLE simulations, each with the same starting population, for several
# generations
res <- EvolveStartingPopulation(num_sims, pop = starting_pop, gen_no, s, chiasm, fus.type, mu, fus.large, fuse.bool)
saveRDS(res, "EvolveStartingPopulation.rds")
# Observe fixation (Expectation: fusions fix)
col.vec <- viridis(num_sims)
# Create matrices to store the counts and proportions of fusions of each
# simulation (row) at each generation (column)
res.count <- res.prop <- matrix(rep(0, num_sims*gen_no), nrow = num_sims,
ncol = gen_no)
for(sim in 1:num_sims){
print(paste(c("Sim: ", sim), collapse = ""))
for(gen in 1:gen_no){
Y.count <- 0
for(indv in 1:pop_size){
# Get count of all Y chr with fusions
res.count[sim, gen] <- res.count[sim, gen] + res[[sim]][[gen]][[indv]][2,25]
# Get count of all Y chromosomes in this generation
Y.count <- Y.count + res[[sim]][[gen]][[indv]][2,13]
}
# Get proportion of Y chrs at this generation with fusions
res.prop[sim, gen] <- res.count[sim, gen]/Y.count
}
}
res.prop
# Plot fixation for each simulation
plot(res.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = paste(c("Chiasmatic Y-Small, mu = ", mu, " s = ", s), collapse = ""),
col = col.vec[1])
for(i in 2:num_sims){
lines(y = res.prop[i, ], x = 1:gen_no, col = col.vec[i])
}
dfe <- GetDFE()
# 5 get a store distribution of fitness effects
GetDFE <- function(){
dfe <- rgamma(5000, shape = .28, scale=113)
# values less than -1 are not meaningful
dfe[dfe>1] <- 1
dfe <- 1-dfe
return(dfe)
}
dfe <- GetDFE()
hist(dfe)
?vline
5x10^-9
5*10^-9
shiny::runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
?read.csv
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv")
setwd("~/Summer 2022/CaveCrawler Maintenance/QTL")
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv")
# Create dataframe into which QTL data should be read
QTL <- data.frame()
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"QTL_Significance_Thresholds",	"Study_Specific_Information",
"Publication")
# Create dataframe into which QTL data should be read
QTL <- data.frame(matrix(nrow = 0, ncol = 12))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"QTL_Significance_Thresholds",	"Study_Specific_Information",
"Publication")
View(QTL)
View(Warren2021)
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv", skip = 1)
!is.na(Warren2021$Protas_et_al.2008)
ncol(Warren2021)
# Remove all markers for which there exist NO QTL for ANY studies as well as the
# columns which are wholly NA
Warren2021 <- Warren2021[!is.na(Warren2021$Protas_et_al.2008) &
!is.na(Warren2021$Protas_et_al.2007) &
!is.na(Warren2021$Yoshizawa.et.al.2012) &
!is.na(Warren2021$Yoshizawa.et.al.2015) &
!is.na(Warren2021$Kowalko.et.al.2013.PNAS) &
!is.na(Warren2021$Kowalko.et.al.2013.CurrentBiology) &
!is.na(Warren2021$O.Quin.et.al.2012), -24:28]
-24:28
-c(24:28)
# Remove all markers for which there exist NO QTL for ANY studies as well as the
# columns which are wholly NA
Warren2021 <- Warren2021[!is.na(Warren2021$Protas_et_al.2008) &
!is.na(Warren2021$Protas_et_al.2007) &
!is.na(Warren2021$Yoshizawa.et.al.2012) &
!is.na(Warren2021$Yoshizawa.et.al.2015) &
!is.na(Warren2021$Kowalko.et.al.2013.PNAS) &
!is.na(Warren2021$Kowalko.et.al.2013.CurrentBiology) &
!is.na(Warren2021$O.Quin.et.al.2012), -c(24:28)]
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv", skip = 1)
# Remove all markers for which there exist NO QTL for ANY studies as well as the
# columns which are wholly NA
Warren2021 <- Warren2021[!is.na(Warren2021$Protas_et_al.2008) |
!is.na(Warren2021$Protas_et_al.2007) |
!is.na(Warren2021$Yoshizawa.et.al.2012) |
!is.na(Warren2021$Yoshizawa.et.al.2015) |
!is.na(Warren2021$Kowalko.et.al.2013.PNAS) |
!is.na(Warren2021$Kowalko.et.al.2013.CurrentBiology) |
!is.na(Warren2021$O.Quin.et.al.2012), -c(24:28)]
colnames(Warren2021)
colnames(Warren2021)[14:20]
# Create a table describing the crosses for each study
CrossKey <- data.frame(
Publication = colnames(Warren2021)[14:20],
Cross = c(rep("Pachon x Surface F2", 2),
rep("Pachon x Texas Surface F2 and F3", 2), NA,
"Tinaja x Surface F2", "Pachon x Texas Surface F2 and F3")
)
CrossKey
levels(as.factor(Warren[,14:20]))
levels(as.factor(Warren2021[,14:20]))
All_QTs <- Warren2021[,14:20]
All_QTs
as.vector(Warren2021[,14:20])
# Create a table describing the Quantiative Traits for each study
Protas2007_QTs <- Warren2021$Protas_et_al.2007
Protas2007_QTs
Protas2007_QTs <- Warren2021$Protas_et_al.2007[!is.na(Warren2021$Protas_et_al.2007)]
Protas2007_QTs
study = 14
Warren2021[, study]
grepl(",", Warren2021[, study])
# Create a table describing the Quantitative Traits for each study
All_QTs <- c()
for(study in 14:20){
All_QTs <- append(All_QTs, Warren2021[
!is.na(Warren2021[, study]) & !grepl(",", Warren2021[, study]), study])
}
All_QTs <- levels(as.factor(All_QTs))
All_QTs
# Create a table describing the Quantitative Traits for each study
All_QTs <- c()
for(study in 14:20){
All_QTs <- append(All_QTs, Warren2021[
!is.na(Warren2021[, study]) & !grepl(",", Warren2021[, study]) &
!grepl(".", Warren2021[, study]), study])
}
All_QTs <- levels(as.factor(All_QTs))
All_QTs
# Create a table describing the Quantitative Traits for each study
All_QTs <- c()
for(study in 14:20){
All_QTs <- append(All_QTs, Warren2021[
!is.na(Warren2021[, study]) & !grepl(",", Warren2021[, study]), study])
}
All_QTs <- levels(as.factor(All_QTs))
All_QTs
# Exclude the quantitative Trait names which are messed up
All_QTs <- All_QTs[-c(1,4:5,7:8,12:13,16,27,40)]
All_QTs
colnames(QTL)
# Create a table describing the crosses and study-specific information for each
# study
Key <- data.frame(
Publication = colnames(Warren2021)[14:20],
Cross = c(rep("Pachon x Surface F2", 2),
rep("Pachon x Texas Surface F2 and F3",2), NA, "Tinaja x Surface F2",
"Pachon x Texas Surface F2"),
Study_Specific_Information = c(
rep(NA, 2),
rep("In this study, quantitative traits were measured in both F2 and F3 fish"), 2),
rep(NA, 3)
)
# Create a table describing the crosses and study-specific information for each
# study
Key <- data.frame(
)
# Create a table describing the crosses and study-specific information for each
# study
Key <- data.frame(
Publication = colnames(Warren2021)[14:20],
Cross = c(rep("Pachon x Surface F2", 2),
rep("Pachon x Texas Surface F2 and F3",2), NA, "Tinaja x Surface F2",
"Pachon x Texas Surface F2"),
Study_Specific_Information = c(
rep(NA, 2),
rep("In this study, quantitative traits were measured in both F2 and F3 fish", 2),
rep(NA, 3))
)
View(Key)
# 07-06-2022
# Annabel Perry
# This script organizes data from Warren et al 2021 into a QTL data file for
# CaveCrawler
setwd("~/Summer 2022/CaveCrawler Maintenance/QTL")
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv", skip = 1)
# Remove all markers for which there exist NO QTL for ANY studies as well as the
# columns which are wholly NA
Warren2021 <- Warren2021[!is.na(Warren2021$Protas_et_al.2008) |
!is.na(Warren2021$Protas_et_al.2007) |
!is.na(Warren2021$Yoshizawa.et.al.2012) |
!is.na(Warren2021$Yoshizawa.et.al.2015) |
!is.na(Warren2021$Kowalko.et.al.2013.PNAS) |
!is.na(Warren2021$Kowalko.et.al.2013.CurrentBiology) |
!is.na(Warren2021$O.Quin.et.al.2012), -c(24:28)]
# Create a table describing the crosses and study-specific information for each
# study
Key <- data.frame(
Publication = colnames(Warren2021)[14:20],
Cross = c(rep("Pachon x Surface F2", 2),
rep("Pachon x Texas Surface F2 and F3",2), NA, "Tinaja x Surface F2",
"Pachon x Texas Surface F2"),
Study_Specific_Information = c(
rep(NA, 2),
rep("In this study, quantitative traits were measured in both F2 and F3 fish", 2),
rep(NA, 3))
)
# Create dataframe into which QTL data should be read
QTL <- data.frame(matrix(nrow = 0, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
QTL
study
Warren2021[row,study]
row()
r = 1
Warren2021[r,study]
study = 15
Warren2021[r,study]
study = 14
r = 5
temp_df <- data.frame(matrix(nrow = 0, ncol = 11))
colnames(temp_df) <- colnames(QTL)
colnames(temp_df)
# Create matrix into which QTL data should be read
QTL <- matrix(nrow = 0, ncol = 11)
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
QTL
temp_row <- rep(NA, 11)
Warren2021$Marker.ID[r]
colnames(Warren2021)
colnames(Warren2021)[study]
QTL <- append(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
QTL <- append(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
# Create matrix into which QTL data should be read
QTL <- matrix(nrow = 0, ncol = 11)
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
# Create matrix into which QTL data should be read
QTL <- matrix(nrow = 0, ncol = 11)
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
r = 5
Warren2021[r,study]
grepl(",", Warren2021[r,study])
str_count("great", "g")
str_count("great", "g")
# 07-06-2022
# Annabel Perry
# This script organizes data from Warren et al 2021 into a QTL data file for
# CaveCrawler
library(stringr)
# 07-06-2022
# Annabel Perry
# This script organizes data from Warren et al 2021 into a QTL data file for
# CaveCrawler
library(stringr)
str_count("great", "g")
QTL
# Create new row in QTL matrix with current marker + publication combo
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
if(grepl(",", Warren2021[r,study])){
for(i in 1:str_count(Warren2021[r,study], ",")){
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
}
}
QTL
grepl(".", Warren2021[r,study])
r = 9
Warren2021[r,study]
"." %in% Warren2021[r,study]
str_count(Warren2021[r,study], ".")
str_count(Warren2021[r,study], '\\.')
grepl('\\.', Warren2021[r,study]
)
r = 5
grepl('\\.', Warren2021[r,study]
)
# Create vector of both possible separators to later loop through
seps <- c(",", '\\.')
seps
s = 2
grepl(seps[s], Warren2021[r,study]
)
r = 9
Warren2021[r,study]
grepl(seps[s], Warren2021[r,study])
QTL
# Create new row in QTL matrix with current marker + publication combo
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
QTL
Warren2021[r,study]
for(i in 1:str_count(Warren2021[r,study], seps[s])){
QTL <- rbind(QTL, c(Warren2021$Marker.ID[r], rep(NA, 9),
colnames(Warren2021)[study]))
}
QTL
# 07-06-2022
# Annabel Perry
# This script organizes data from Warren et al 2021 into a QTL data file for
# CaveCrawler
library(stringr)
setwd("~/Summer 2022/CaveCrawler Maintenance/QTL")
# Read in "Supplemental Data 1" from Warren et al 2021
Warren2021 <- read.csv("41467_2021_21733_MOESM4_ESM.csv", skip = 1)
# Remove all markers for which there exist NO QTL for ANY studies as well as the
# columns which are wholly NA
Warren2021 <- Warren2021[!is.na(Warren2021$Protas_et_al.2008) |
!is.na(Warren2021$Protas_et_al.2007) |
!is.na(Warren2021$Yoshizawa.et.al.2012) |
!is.na(Warren2021$Yoshizawa.et.al.2015) |
!is.na(Warren2021$Kowalko.et.al.2013.PNAS) |
!is.na(Warren2021$Kowalko.et.al.2013.CurrentBiology) |
!is.na(Warren2021$O.Quin.et.al.2012), -c(24:28)]
# Create a table describing the crosses and study-specific information for each
# study
Key <- data.frame(
Publication = colnames(Warren2021)[14:20],
Cross = c(rep("Pachon x Surface F2", 2),
rep("Pachon x Texas Surface F2 and F3",2), NA, "Tinaja x Surface F2",
"Pachon x Texas Surface F2"),
Study_Specific_Information = c(
rep(NA, 2),
rep("In this study, quantitative traits were measured in both F2 and F3 fish", 2),
rep(NA, 3))
)
# Create matrix into which QTL data should be read
QTL <- matrix(nrow = 0, ncol = 11)
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create vector of both possible separators to later loop through
seps <- c(",", '\\.')
QTL
seps
# Iterate through each entry in Warren2021
for(r in 1:nrow(Warren2021)){
# Count how many publications have information for this marker AND how many
# QTL there are per publication and add the appropriate number of rows for
# this marker
for(study in 14:20){
# Check if the current marker has information for the current study
if(!is.na(Warren2021[r,study])){
# Create new row in QTL matrix with...
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
for(s in 1:length(seps)){
if(grepl(seps[s], Warren2021[r,study])){
for(i in 1:str_count(Warren2021[r,study], seps[s])){
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
}
}
}
}
}
QTL
# Write the information to QTL.csv
write.csv(QTL, "QTL.csv", row.names = F)
setwd("/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting")
library(shiny)
?conditionalPanel
?radioButtons
runApp()
runApp()
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
shiny::runApp()
