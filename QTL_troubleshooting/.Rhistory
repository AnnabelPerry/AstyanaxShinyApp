next
}
if (MR.search_term == position_table$Gene_Name[i]) {
GR.chr <- as.numeric(position_table$Scaffold[i])
GR.start <- as.numeric(position_table$Start_Locus[i]) - MR.bp
GR.end <- as.numeric(position_table$End_Locus[i]) + MR.bp
GR.bool <- T
}
}
if (GR.bool == F) {
QTL.wrnings <- append(QTL.wrnings, paste("No marker is not found in data"))
return(list(data.frame(),data.frame(),chr_plot,QTL.wrnings))
}
}
#TODO Show Zelun & Daniel: Changed this so that we do not need to loop
# through QTL_table at all
# For the marker table, retrieve the numbers corresponding to rows which
# match the input parameters
marker_rows <- which((QTL_table$Chromosome == GR.chr) &
(QTL_table$Start_Position_on_Chromosome >= GR.start) &
(QTL_table$End_Position_on_Chromosome <= GR.end))
# If no markers in the QTL table match the input parameters, output a
# warning and proceed to check for genes
if(!length(marker_rows)){
QTL.wrnings <- append(QTL.wrnings,
paste(c("No markers are found in selected range: ",
"from ", GR.start, " to ",GR.end,
" on chromosome ", GR.chr), collapse = ""))
# If you DID find rows matching the input parameters, store their data
}else{
QTL_Marker_Data$`Marker (Peak)` <- QTL_table$Marker[marker_rows]
QTL_Marker_Data$Scaffold <- QTL_table$Chromosome[marker_rows]
QTL_Marker_Data$`Start Position on Scaffold` <-
QTL_table$Start_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`End Position on Scaffold` <-
QTL_table$End_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`LOD (Peak)` <- QTL_table$LOD[marker_rows]
QTL_Marker_Data$`Quantitative Trait` <- QTL_table$Quantitative_Trait[
marker_rows]
QTL_Marker_Data$`Percent Variance Explained` <-
QTL_table$Percent_Variance_Explained[marker_rows]
QTL_Marker_Data$`Study-Specific Information` <-
QTL_table$Study_Specific_Information[marker_rows]
QTL_Marker_Data$`Publication(s)` <- QTL_table$Publication[marker_rows]
}
QTL_table$Marker[marker_rows]
length(QTL_table$Marker[marker_rows])
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
nrow(QTL_Marker_Data) <- length(QTL_table$Marker[marker_rows])
nrow(QTL_Marker_Data)
length(marker_rows)
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
QTL_Marker_Data <- rbind(QTL_Marker_Data, rep(NA, length(marker_rows)))
QTL_Marker_Data
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Marker_Data <- data.frame(matrix(nrow = 0, ncol = 10))
colnames(QTL_Marker_Data) <- c("Marker (Peak)", "Scaffold",
"Start Position on Scaffold",
"End Position on Scaffold",
"Cross",
"LOD (Peak)",
"Quantitative Trait",
"Percent Variance Explained",
"Study-Specific Information", "Publication(s)")
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
QTL_Marker_Data <- rbind(QTL_Marker_Data, rep(NA, length(marker_rows)))
QTL_Marker_Data
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(
matrix(nrow = rep(NA, length(marker_rows)),
ncol = rep(NA, ncol(QTL_Marker_Data)))
)
)
marker_rows
length(marker_rows)
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(
matrix(nrow = length(marker_rows)),
ncol = ncol(QTL_Marker_Data)))
?matrix
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(
matrix(nrow = length(marker_rows)),
ncol = ncol(QTL_Marker_Data),
dimnames = list(rep(NULL, length(marker_rows)),
colnames(QTL_Marker_Data))))
data.frame(
matrix(nrow = length(marker_rows)),
ncol = ncol(QTL_Marker_Data),
dimnames = list(rep(NULL, length(marker_rows)),
colnames(QTL_Marker_Data)))
list(rep(NULL, length(marker_rows)),
colnames(QTL_Marker_Data)
)
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Marker_Data <- data.frame(matrix(nrow = 0, ncol = 10))
colnames(QTL_Marker_Data) <- c("Marker (Peak)", "Scaffold",
"Start Position on Scaffold",
"End Position on Scaffold",
"Cross",
"LOD (Peak)",
"Quantitative Trait",
"Percent Variance Explained",
"Study-Specific Information", "Publication(s)")
data.frame(
matrix(nrow = length(marker_rows)),
ncol = ncol(QTL_Marker_Data),
dimnames = list(rep(NULL, length(marker_rows)),
colnames(QTL_Marker_Data)))
QTL_Marker_Data
marker_rows
rep(NULL, length(marker_rows)
)
data.frame(
matrix(nrow = length(marker_rows)),
ncol = ncol(QTL_Marker_Data),
dimnames = list(1:length(marker_rows),
colnames(QTL_Marker_Data)))
matrix(nrow = length(marker_rows),
ncol = ncol(QTL_Marker_Data),
dimnames = list(1:length(marker_rows),
colnames(QTL_Marker_Data)))
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(
matrix(nrow = length(marker_rows),
ncol = ncol(QTL_Marker_Data),
dimnames = list(1:length(marker_rows),
colnames(QTL_Marker_Data)))))
QTL_Marker_Data
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(matrix(
nrow = length(marker_rows),
ncol = ncol(QTL_Marker_Data))))
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Marker_Data <- data.frame(matrix(nrow = 0, ncol = 10))
colnames(QTL_Marker_Data) <- c("Marker (Peak)", "Scaffold",
"Start Position on Scaffold",
"End Position on Scaffold",
"Cross",
"LOD (Peak)",
"Quantitative Trait",
"Percent Variance Explained",
"Study-Specific Information", "Publication(s)")
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters
OriginalColNames <- colnames(QTL_Marker_Data)
OriginalColNames
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(matrix(
nrow = length(marker_rows),
ncol = ncol(QTL_Marker_Data),
dimnames = list(1:length(marker_rows),
OriginalColNames))))
QTL_Marker_Data
colnames(QTL_Marker_Data) <- OriginalColNames
QTL_Marker_Data
# Next, fill in each row with the data from QTL_table corresponding to
# that row
QTL_Marker_Data$`Marker (Peak)` <- QTL_table$Marker[marker_rows]
QTL_Marker_Data$Scaffold <- QTL_table$Chromosome[marker_rows]
QTL_Marker_Data$`Start Position on Scaffold` <-
QTL_table$Start_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`End Position on Scaffold` <-
QTL_table$End_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`LOD (Peak)` <- QTL_table$LOD[marker_rows]
QTL_Marker_Data$`Quantitative Trait` <- QTL_table$Quantitative_Trait[
marker_rows]
QTL_Marker_Data$`Percent Variance Explained` <-
QTL_table$Percent_Variance_Explained[marker_rows]
QTL_Marker_Data$`Study-Specific Information` <-
QTL_table$Study_Specific_Information[marker_rows]
QTL_Marker_Data$`Publication(s)` <- QTL_table$Publication[marker_rows]
QTL_Marker_Data
# For the position table, retrieve the numbers corresponding to rows which
# match the input parameters
gene_rows <- which((position_table$Scaffold == GR.chr) &
(position_table$Start_Locus >= GR.start) &
(position_table$End_Locus <= GR.end))
gene_rows
# If no genes in the position table match the input parameters, output a
# warning
if(!length(gene_rows)){
QTL.wrnings <- append(QTL.wrnings,
paste(c("No genes are found in selected range: ",
"from ", GR.start, " to ",GR.end,
" on chromosome ", GR.chr), collapse = ""))
# If you DID find rows matching the input parameters, store their data
}else{
QTL_Gene_Data$Gene <- position_table$Gene_Name[gene_rows]
QTL_Gene_Data$Scaffold <- position_table$Scaffold[gene_rows]
QTL_Gene_Data$`Start Locus` <- position_table$Start_Locus[gene_rows]
QTL_Gene_Data$`End Locus` <- position_table$End_Locus[gene_rows]
QTL_Gene_Data$Publication <- position_table$Publication[gene_rows]
}
# If no genes in the position table match the input parameters, output a
# warning
if(!length(gene_rows)){
QTL.wrnings <- append(QTL.wrnings,
paste(c("No genes are found in selected range: ",
"from ", GR.start, " to ",GR.end,
" on chromosome ", GR.chr), collapse = ""))
# If you DID find rows matching the input parameters, store their data
}else{
# First, add as many rows to the dataframe as there are genes
# corresponding to the input parameters. Save the current column names,
# because when you add the NA rows these will get messed up
OriginalColNames <- colnames(QTL_Gene_Data)
QTL_Gene_Data <- rbind(QTL_Gene_Data,
data.frame(matrix(
nrow = length(marker_rows),
ncol = ncol(QTL_Gene_Data),
dimnames = list(1:length(marker_rows),
OriginalColNames))))
colnames(QTL_Gene_Data) <- OriginalColNames
QTL_Gene_Data$Gene <- position_table$Gene_Name[gene_rows]
QTL_Gene_Data$Scaffold <- position_table$Scaffold[gene_rows]
QTL_Gene_Data$`Start Locus` <- position_table$Start_Locus[gene_rows]
QTL_Gene_Data$`End Locus` <- position_table$End_Locus[gene_rows]
QTL_Gene_Data$Publication <- position_table$Publication[gene_rows]
}
# Vector into which warnings will be appended
QTL.wrnings <- c("Notes: ")
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Marker_Data <- data.frame(matrix(nrow = 0, ncol = 10))
colnames(QTL_Marker_Data) <- c("Marker (Peak)", "Scaffold",
"Start Position on Scaffold",
"End Position on Scaffold",
"Cross",
"LOD (Peak)",
"Quantitative Trait",
"Percent Variance Explained",
"Study-Specific Information", "Publication(s)")
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Gene_Data <- data.frame(matrix(nrow = 0, ncol = 5))
colnames(QTL_Gene_Data) <- c("Gene", "Scaffold", "Start Locus", "End Locus",
"Publication")
# Object into which plots will be stored (This is currently a placeholder)
chr_plot <- ggplot()
#TODO Show Zelun & Daniel: Changed this so that we do not need to loop
# through QTL_table at all
# For the marker table, retrieve the numbers corresponding to rows which
# match the input parameters
marker_rows <- which((QTL_table$Chromosome == GR.chr) &
(QTL_table$Start_Position_on_Chromosome >= GR.start) &
(QTL_table$End_Position_on_Chromosome <= GR.end))
# If no markers in the QTL table match the input parameters, output a
# warning and proceed to check for genes
if(!length(marker_rows)){
QTL.wrnings <- append(QTL.wrnings,
paste(c("No markers are found in selected range: ",
"from ", GR.start, " to ",GR.end,
" on chromosome ", GR.chr), collapse = ""))
# If you DID find rows matching the input parameters, store their data
}else{
# First, add as many rows to the dataframe as there are markers
# corresponding to the input parameters. Save the current column names,
# because when you add the NA rows these will get messed up
OriginalColNames <- colnames(QTL_Marker_Data)
QTL_Marker_Data <- rbind(QTL_Marker_Data,
data.frame(matrix(
nrow = length(marker_rows),
ncol = ncol(QTL_Marker_Data),
dimnames = list(1:length(marker_rows),
OriginalColNames))))
colnames(QTL_Marker_Data) <- OriginalColNames
# Next, fill in each row with the data from QTL_table corresponding to
# that row
QTL_Marker_Data$`Marker (Peak)` <- QTL_table$Marker[marker_rows]
QTL_Marker_Data$Scaffold <- QTL_table$Chromosome[marker_rows]
QTL_Marker_Data$`Start Position on Scaffold` <-
QTL_table$Start_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`End Position on Scaffold` <-
QTL_table$End_Position_on_Chromosome[marker_rows]
QTL_Marker_Data$`LOD (Peak)` <- QTL_table$LOD[marker_rows]
QTL_Marker_Data$`Quantitative Trait` <- QTL_table$Quantitative_Trait[
marker_rows]
QTL_Marker_Data$`Percent Variance Explained` <-
QTL_table$Percent_Variance_Explained[marker_rows]
QTL_Marker_Data$`Study-Specific Information` <-
QTL_table$Study_Specific_Information[marker_rows]
QTL_Marker_Data$`Publication(s)` <- QTL_table$Publication[marker_rows]
}
# For the position table, retrieve the numbers corresponding to rows which
# match the input parameters
gene_rows <- which((position_table$Scaffold == GR.chr) &
(position_table$Start_Locus >= GR.start) &
(position_table$End_Locus <= GR.end))
# If no genes in the position table match the input parameters, output a
# warning
if(!length(gene_rows)){
QTL.wrnings <- append(QTL.wrnings,
paste(c("No genes are found in selected range: ",
"from ", GR.start, " to ",GR.end,
" on chromosome ", GR.chr), collapse = ""))
# If you DID find rows matching the input parameters, store their data
}else{
# First, add as many rows to the dataframe as there are genes
# corresponding to the input parameters. Save the current column names,
# because when you add the NA rows these will get messed up
OriginalColNames <- colnames(QTL_Gene_Data)
QTL_Gene_Data <- rbind(QTL_Gene_Data,
data.frame(matrix(
nrow = length(gene_rows),
ncol = ncol(QTL_Gene_Data),
dimnames = list(1:length(gene_rows),
OriginalColNames))))
colnames(QTL_Gene_Data) <- OriginalColNames
QTL_Gene_Data$Gene <- position_table$Gene_Name[gene_rows]
QTL_Gene_Data$Scaffold <- position_table$Scaffold[gene_rows]
QTL_Gene_Data$`Start Locus` <- position_table$Start_Locus[gene_rows]
QTL_Gene_Data$`End Locus` <- position_table$End_Locus[gene_rows]
QTL_Gene_Data$Publication <- position_table$Publication[gene_rows]
}
QTL_Gene_Data
QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,
MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = T, TM.QT = c("Albinism", "Eye Size"))
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,
MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = T, TM.QT = c("Albinism", "Eye Size"))
View(expctd_genes_GR)
x <- QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
x[[1]]
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
QTL(chr_table, position_table, QTL_table, GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA, MR.bp = NA, TM.bool = F, TM.QT = NA)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
# Add the name and positions of all markers to the annotation dataframe
OriginalColNames <- colnames(plot_annot)
plot_annot <- rbind(plot_annot,
data.frame(matrix(
nrow = length(marker_rows),
ncol = ncol(plot_annot),
dimnames = list(1:length(marker_rows),
OriginalColNames))))
colnames(plot_annot) <- OriginalColNames
plot_annot$`Element Name` <- QTL_table$Marker[marker_rows]
plot_annot$`Chromosome Name` <- QTL_table$Chromosome[marker_rows]
plot_annot$`Element Start` <-
QTL_table$Start_Position_on_Chromosome[marker_rows]
plot_annot$`Element End` <-
QTL_table$End_Position_on_Chromosome[marker_rows]
plot_annot
# Add the name and positions of all genes to the annotation dataframe
OriginalColNames <- colnames(plot_annot)
plot_annot <- rbind(plot_annot,
data.frame(matrix(
nrow = length(gene_rows),
ncol = ncol(plot_annot),
dimnames = list(1:length(gene_rows),
OriginalColNames))))
OriginalColNames
OriginalColNames
plot_annot
plot_annot <- rbind(plot_annot,
data.frame(matrix(
nrow = length(gene_rows),
ncol = ncol(plot_annot),
dimnames = list(1:length(gene_rows),
OriginalColNames))))
data.frame(matrix(
nrow = length(gene_rows),
ncol = ncol(plot_annot),
dimnames = list(1:length(gene_rows),
OriginalColNames)))
OriginalColNames
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
# Add the name and positions of all genes to the annotation dataframe
temp_df <- data.frame(matrix(nrow = length(gene_rows),
ncol = ncol(plot_annot)))
temp_df
colnames(temp_df) <- colnames(plot_annot)
temp_df
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
temp_df
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
nrow(plot_annot)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
# Defines a dataframe to store the marker and gene locations to be plotted
plot_annot <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(plot_annot) <- c("Element Name", "Chromosome Name", "Element Start",
"Element End")
nrow(plot_annot)
plot_annot
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
# Add the name and positions of all markers to the annotation dataframe
# First, create a temporary dataframe in which to store the markers
temp_df <- data.frame(matrix(nrow = length(marker_rows),
ncol = ncol(plot_annot)))
colnames(temp_df) <- colnames(plot_annot)
temp_df
temp_df$`Element Name` <- QTL_table$Marker[marker_rows]
temp_df$`Chromosome Name` <- QTL_table$Chromosome[marker_rows]
temp_df$`Element Start` <-
QTL_table$Start_Position_on_Chromosome[marker_rows]
temp_df$`Element End` <-
QTL_table$End_Position_on_Chromosome[marker_rows]
temp_df
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
# Add the name and positions of all genes to the annotation dataframe
# First, create a temporary dataframe with as many rows as there are new
# genes
temp_df <- data.frame(matrix(nrow = length(gene_rows),
ncol = ncol(plot_annot)))
colnames(temp_df) <- colnames(plot_annot)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
nrow(plot_annot)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA) <- x
x <- QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
x[[2]]
x[[2]] == expctd_genes_GR
View(x[[2]])
expctd_genes_GR <- expctd_genes_GR[,c(5,1:3)]
View(x[[2]])
x[[2]] == expctd_genes_GR
x[[2]][,1:4] == expctd_genes_GR
x <- QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,  MR.bool = T, MR.search_term = "m17241",
MR.bp = 429177,
TM.bool = F, TM.QT = NA)
x
x[[2]][,1:4] == expctd_genes_GR
expctd_genes_MR <- expctd_genes_MR[,c(5,1:3)]
x[[2]][,1:4] == expctd_genes_MR
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,
MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = T, TM.QT = c("Albinism", "Eye Size"))
source("C:/Users/knigh/Documents/GitHub/CaveCrawler/QTL_troubleshooting/Zelun_functions.R")
QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,
MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = T, TM.QT = c("Albinism", "Eye Size"))
QTL(chr_table, position_table, QTL_table,
GR.bool = T, GR.chr = 13, GR.start = 37945372, GR.end = 38374549,  MR.bool = F, MR.search_term = NA,
MR.bp = NA,
TM.bool = F, TM.QT = NA)
QTL(chr_table, position_table, QTL_table,
GR.bool = F, GR.chr = NA, GR.start = NA, GR.end = NA,  MR.bool = T, MR.search_term = "m17241",
MR.bp = 429177,
TM.bool = F, TM.QT = NA)
chromoMap()
?chromoMap
head(chr_table)
colnames(chr_table)
runApp('Zelun_app.R')
runApp('Zelun_app.R')
