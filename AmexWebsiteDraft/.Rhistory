lty = "dotted")
# Adjust size of y-axis labels
axis(side = 2, at = 1:length(keys), labels = levels(as.factor(keys)), cex.axis = 0.75)
# Change cex for title
par(cex = 0.6)
# Add title
title(main = "DLC-Categorized Behavior at Each Frame in Video 1", line = 0.5)
# Add extra x-axis tick marks
# EDIT: Adjust intermediate points once you know number of frames in video
axis(side = 1, at = c(5,10,15,25,30,35,45,50,55,65,70,75,85,90,95), labels = F,
lty = "dashed")
# Convert behavioral numeric codes to appropriate behavior names
keys <- c("Freezing", "Hyperactivity", "Erratic turning")
for(i in 1:length(keys)){
DLC_dat[DLC_dat[,2] == i,2] = keys[i]
human_dat[human_dat[,2] == i,2] = keys[i]
}
# Change font size, margins, and axis orientations, then preset to add two plots
# side-by-side
par(cex = 0.5, las = 1, mar = c(6,5.5,5,0.75), mfrow = c(nrow = 1, ncol = 2))
# Make two stripcharts, one for human-categorized and one for DLC-categorized,
# with behavior on y-axis and frame on x-axis
stripchart(human_dat$Frame~human_dat$Behavior,
pch = 15, cex = 0.3, xlab = "Frame",
# Suppress y-axis labels so you can later adjust size of y-axis labels
yaxt = "n"
)
# Add extra x-axis tick marks
# EDIT: Adjust intermediate points once you know number of frames in video
axis(side = 1, at = c(5,10,15,25,30,35,45,50,55,65,70,75,85,90,95), labels = F,
lty = "dashed")
# Adjust size of y-axis labels
axis(side = 2, at = 1:length(keys), labels = levels(as.factor(keys)), cex.axis = 0.75)
# Change cex for title
par(cex = 0.6)
# Add title
title(main = "Human-Categorized Behavior at Each Frame in Video 1", line = 0.5)
# Restore size for next stripchart
par(cex = 1)
stripchart(DLC_dat$Frame~DLC_dat$Behavior,
pch = 15, cex = 0.3, xlab = "Frame",
# Suppress y-axis labels so you can later adjust size of y-axis labels
yaxt = "n"
)
# Add extra x-axis tick marks
# EDIT: Adjust intermediate points once you know number of frames in video
axis(side = 1, at = c(5,10,15,25,30,35,45,50,55,65,70,75,85,90,95), labels = F,
lty = "dashed")
# Adjust size of y-axis labels
axis(side = 2, at = 1:length(keys), labels = levels(as.factor(keys)), cex.axis = 0.75)
# Change cex for title
par(cex = 0.6)
# Add title
title(main = "DLC-Categorized Behavior at Each Frame in Video 1", line = 0.5)
# Create faux human-categorized data
# Encode behaviors numerically to practice converting them
# 1 = Freezing
# 2 = Hyperactivity
# 3 = Erratic turning
human_dat <- data.frame(Frame = 1:100,
Behavior = sample(1:3,
size = 100,
replace = TRUE)
)
e faux DLC-categorized data
DLC_dat <- data.frame(Frame = 1:100,
Behavior = sample(1:3,
size = 100,
replace = TRUE)
)
# Convert behavioral numeric codes to appropriate behavior names
keys <- c("Freezing", "Hyperactivity", "Erratic turning")
for(i in 1:length(keys)){
DLC_dat[DLC_dat[,2] == i,2] = keys[i]
human_dat[human_dat[,2] == i,2] = keys[i]
}
# Change font size, margins, and axis orientations, then preset to add two plots
# side-by-side
par(cex = 0.5, las = 1, mar = c(6,5.5,5,0.75), mfrow = c(nrow = 1, ncol = 2))
# Make two stripcharts, one for human-categorized and one for DLC-categorized,
# with behavior on y-axis and frame on x-axis
stripchart(human_dat$Frame~human_dat$Behavior,
pch = 15, cex = 0.3, xlab = "Frame",
# Suppress y-axis labels so you can later adjust size of y-axis labels
yaxt = "n"
)
# Add extra x-axis tick marks
# EDIT: Adjust intermediate points once you know number of frames in video
axis(side = 1, at = c(5,10,15,25,30,35,45,50,55,65,70,75,85,90,95), labels = F,
lty = "dashed")
# Adjust size of y-axis labels
axis(side = 2, at = 1:length(keys), labels = levels(as.factor(keys)), cex.axis = 0.75)
# Change cex for title
par(cex = 0.6)
# Add title
title(main = "Human-Categorized Behaviors in Video 1", line = 0.5)
# Restore size for next stripchart
par(cex = 1)
stripchart(DLC_dat$Frame~DLC_dat$Behavior,
pch = 15, cex = 0.3, xlab = "Frame",
# Suppress y-axis labels so you can later adjust size of y-axis labels
yaxt = "n"
)
# Add extra x-axis tick marks
# EDIT: Adjust intermediate points once you know number of frames in video
axis(side = 1, at = c(5,10,15,25,30,35,45,50,55,65,70,75,85,90,95), labels = F,
lty = "dashed")
# Adjust size of y-axis labels
axis(side = 2, at = 1:length(keys), labels = levels(as.factor(keys)), cex.axis = 0.75)
# Change cex for title
par(cex = 0.6)
# Add title
title(main = "DLC-Categorized Behaviors in Video 1", line = 0.5)
328/(328+84+42+8+7+16+197+4)
104+170+11+150+3+40+91
95+18+30+21+20+1+51+6
84+74+75+83+54+3+68+31
42+140+90+54+225+14+202+147
8+25+13+1+11+1+5
7+29+15+6+8+3+7
16+33+67+44+3+8+12
45+56+4+28+122+148+197
4+30+37+8+6+19+2+30
################################## Tinaja ####################################
library("ggplot2")
# Read in Tinaja data for Figure II
behavior <- c("Slow\nTurning", "Slow\nTurning", "Fast\nTurning", "Fast\nTurning",
"Flit\nSwimming", "Flit\nSwimming", "Sustained\nSwimming", "Sustained\nSwimming",
"Pushing\nAgainst\nTank Wall", "Pushing\nAgainst\nTank Wall",
"Drifting", "Drifting", "Suspension", "Suspension", "Bottom\nSkimming",
"Bottom\nSkimming", "Other", "Other")
# How many classifications of each behavior were correct
# vs. incorrect?
val <- c(
328, 242,
801, 472,
2126, 914,
162, 64,
456, 75,
466, 183,
19, 4,
2736, 600,
218, 136
)
# Frames classified as "Incorrect" were classified as the indicated behavior
# but were actually a different behavior
Key <- rep(c("Correct","Incorrect"),9)
dat <- data.frame(behavior,Key,val)
# Two color-blind freindly colors
CBPalette <- c("#56B4E9", "#D55E00")
# Stacked
ggplot(dat, aes(fill=Key, y=val, x=behavior)) +
geom_bar(position="stack", stat="identity") +
# Changes colors to be color-blind friendly
scale_fill_manual(values = CBPalette) +
xlab(label = "") + ylab("Frames") +
theme_bw() +
# Edit x-axis labels
theme(axis.text.x = element_text(size = 6.5),
# Center plot title
plot.title = element_text(hjust = 0.5)) +
ggtitle("Tinaja False-Positives")
# Stacked
ggplot(dat, aes(fill=Key, y=val, x=behavior)) +
geom_bar(position="stack", stat="identity") +
# Changes colors to be color-blind friendly
scale_fill_manual(values = CBPalette) +
xlab(label = "") + ylab("Frames") +
theme_bw() +
# Edit x-axis labels
theme(axis.text.x = element_text(size = 6),
# Center plot title
plot.title = element_text(hjust = 0.5)) +
ggtitle("Tinaja False-Positives")
################################## Molino ####################################
library("ggplot2")
# Read in Tinaja data for Figure II
behavior <- c("Slow\nTurning", "Slow\nTurning", "Fast\nTurning", "Fast\nTurning",
"Flit\nSwimming", "Flit\nSwimming", "Sustained\nSwimming", "Sustained\nSwimming",
"Pushing\nAgainst\nTank Wall", "Pushing\nAgainst\nTank Wall",
"Drifting", "Drifting", "Suspension", "Suspension", "Bottom\nSkimming",
"Bottom\nSkimming", "Other", "Other")
# How many classifications of each behavior were correct
# vs. incorrect?
val <- c(
582, (293+78+4+86+81+75+138+15),
751, (104+46+6+75+86+80+66+19),
959, (170+211+4+162+296+77+250+52),
5, (2+1),
241, (11+11+7+29+43+7),
1566, (150+307+204+4+211+141+107+76),
191, (3+12+3+1+1+5+2+2),
331, (40+16+7+14+17+1),
694, (91+249+120+1+116+284+96+39)
)
# Frames classified as "Incorrect" were classified as the indicated behavior
# but were actually a different behavior
Key <- rep(c("Correct","Incorrect"),9)
dat <- data.frame(behavior,Key,val)
# Two color-blind freindly colors
CBPalette <- c("#56B4E9", "#D55E00")
# Stacked
ggplot(dat, aes(fill=Key, y=val, x=behavior)) +
geom_bar(position="stack", stat="identity") +
# Changes colors to be color-blind friendly
scale_fill_manual(values = CBPalette) +
xlab(label = "") + ylab("Frames") +
theme_bw() +
# Edit x-axis labels
theme(axis.text.x = element_text(size = 6),
# Center plot title
plot.title = element_text(hjust = 0.5)) +
ggtitle("Tinaja False-Positives")
################################ Molino ####################################
library("ggplot2")
# Read in Tinaja data for Figure II
behavior <- c("Slow\nTurning", "Slow\nTurning", "Fast\nTurning", "Fast\nTurning",
"Flit\nSwimming", "Flit\nSwimming", "Sustained\nSwimming", "Sustained\nSwimming",
"Pushing\nAgainst\nTank Wall", "Pushing\nAgainst\nTank Wall",
"Drifting", "Drifting", "Suspension", "Suspension", "Bottom\nSkimming",
"Bottom\nSkimming", "Other", "Other")
# How many classifications of each behavior were correct
# vs. incorrect?
val <- c(
582, (293+78+4+86+81+75+138+15),
751, (104+46+6+75+86+80+66+19),
959, (170+211+4+162+296+77+250+52),
5, (2+1),
241, (11+11+7+29+43+7),
1566, (150+307+204+4+211+141+107+76),
191, (3+12+3+1+1+5+2+2),
331, (40+16+7+14+17+1),
694, (91+249+120+1+116+284+96+39)
)
# Frames classified as "Incorrect" were classified as the indicated behavior
# but were actually a different behavior
Key <- rep(c("Correct","Incorrect"),9)
dat <- data.frame(behavior,Key,val)
# Two color-blind freindly colors
CBPalette <- c("#56B4E9", "#D55E00")
# Stacked
ggplot(dat, aes(fill=Key, y=val, x=behavior)) +
geom_bar(position="stack", stat="identity") +
# Changes colors to be color-blind friendly
scale_fill_manual(values = CBPalette) +
xlab(label = "") + ylab("Frames") +
theme_bw() +
# Edit x-axis labels
theme(axis.text.x = element_text(size = 6),
# Center plot title
plot.title = element_text(hjust = 0.5)) +
ggtitle("Molino False-Positives")
################################## Pachon ####################################
library("ggplot2")
# Read in Tinaja data for Figure II
behavior <- c("Slow\nTurning", "Slow\nTurning", "Fast\nTurning", "Fast\nTurning",
"Flit\nSwimming", "Flit\nSwimming", "Sustained\nSwimming", "Sustained\nSwimming",
"Pushing\nAgainst\nTank Wall", "Pushing\nAgainst\nTank Wall",
"Drifting", "Drifting", "Suspension", "Suspension", "Bottom\nSkimming",
"Bottom\nSkimming", "Other", "Other")
# How many classifications of each behavior were correct
# vs. incorrect?
val <- c(
327, (132+58+157+149+39+164+71),
310, (336+80+309+200+74+5+215+130),
611, (258+156+432+217+438+4+498+409),
221, (86+31+28+56+25+46+27),
1043, (239+169+126+302+113+2+168+145),
184, (23+21+39+33+35+37+19),
3, 0,
535, (70+39+65+50+45+23+18),
178, (21+32+24+46+52+32+14)
)
# Frames classified as "Incorrect" were classified as the indicated behavior
# but were actually a different behavior
Key <- rep(c("Correct","Incorrect"),9)
dat <- data.frame(behavior,Key,val)
# Two color-blind freindly colors
CBPalette <- c("#56B4E9", "#D55E00")
# Stacked
ggplot(dat, aes(fill=Key, y=val, x=behavior)) +
geom_bar(position="stack", stat="identity") +
# Changes colors to be color-blind friendly
scale_fill_manual(values = CBPalette) +
xlab(label = "") + ylab("Frames") +
theme_bw() +
# Edit x-axis labels
theme(axis.text.x = element_text(size = 6),
# Center plot title
plot.title = element_text(hjust = 0.5)) +
ggtitle("Pachon False-Positives")
# Libraries
library(ggplot2)
# Load dataset
dat <- read.csv("test.csv")
dat
# Load dataset
banana <- read.csv("test.csv")
banana
# Load dataset
dat <- read.csv("test.csv")
age <- dat$ï..Time.Point
age
dat
dat[1,]
dat[1,3]
x = 1
x
x == 1
dat
dat$Tracking == 1
new.dat <- dat[dat$Tracking == 1, ]
# Load dataset
dat <- read.csv("test.csv")
# Load dataset
dat <- read.csv("test.csv")
dat
new.dat
# Load dataset
dat <- read.csv("test.csv")
new.dat <- dat[dat$Tracking == 1, ]
new.dat
new.dat2 <- data.frame(
Age = numeric(),
n = numeric(),
Tracking = numeric()
)
new.dat2
ages <- levels(as.factor(dat$ï..Time.Point))
dat
ages <- levels(as.factor(dat$ï..Time.Point))
n <- levels(as.factor(dat$n))
ages
n
sum(new.dat[((new.dat$Age == age[i]) & (new.dat$n == n[j])), 3])
sum(new.dat[((new.dat$Age == age[1]) & (new.dat$n == n[1])), 3])
Age
n
ages
sum(new.dat[((new.dat$Age == ages[1]) & (new.dat$n == n[1])), 3])
ages
n
new.dat
sum(new.dat[((new.dat$Age == ages[1]) & (new.dat$n == n[2])), 3])
new.dat$n == n[2]
new.dat$Age == ages[1]
new.dat$i..Time Point == ages[1]
sum(new.dat[((new.dat$ï..Time.Point == ages[1]) & (new.dat$n == n[2])), 3])
for(i in 1:length(age)){
for(j in 1:length(n)){
new.dat2[i,3] <- sum(new.dat[((new.dat$ï..Time.Point == ages[i]) & (new.dat$n == n[j])), 3])
}
}
new.dat2
new.dat2 <- data.frame(
Age = ages,
n = n,
Tracking = numeric()
)
ages
n
new.dat2 <- data.frame(
Age = c(7, 7, 7, 14, 14, 14),
n = rep(n, 2),
Tracking = numeric(6)
)
new.dat2
for(i in 1:length(age)){
for(j in 1:length(n)){
new.dat2[i,3] <- sum(new.dat[((new.dat$ï..Time.Point == ages[i]) & (new.dat$n == n[j])), 3])
}
}
new.dat2
new.dat
new.dat
rep(n, 2)
new.dat2 <- data.frame(
Age = c(7, 7, 7, 14, 14, 14),
n = rep(n, 2),
Tracking = numeric(6)
)
new.dat2
ages <- c(7, 7, 7, 14, 14, 14)
new.dat2 <- data.frame(
Age = ages,
n = rep(n, 2),
Tracking = numeric(6)
)
new.dat2
for(i in 1:length(n)){
for(j in 1:length(ages)){
new.dat2[i,3] <- sum(new.dat[((new.dat$ï..Time.Point == ages[i]) & (new.dat$n == n[j])), 3])
}
}
new.dat2
for(i in 1:length(n)){
for(j in 1:length(ages)){
new.dat2[i,3] <- sum(new.dat[((new.dat$ï..Time.Point == ages[j]) & (new.dat$n == n[i])), 3])
}
}
new.dat
new.dat2
View(new.dat)
for(i in 1:length(n)){
for(j in 1:length(ages)){
new.dat2[j,3] <- sum(new.dat[((new.dat$ï..Time.Point == ages[j]) & (new.dat$n == n[i])), 3])
}
}
new.dat2
install.packages("mypackage")
install.packages("mypackage_1.0.tar.gz")
install.packages("rcpp", dep = TRUE)
install.packages("Rcpp", dep = TRUE)
ptm <- proc.time()
PollyMicros(CSVs,scaffold_vector, 2, "PollyMicrosOutput")
PollyMicrosRunTime <- proc.time() - ptm
PollyMicrosRunTime
library("Rcpp")
?Rcpp
pkgs <- as.data.frame(installed.packages(), stringsAsFactors = FALSE, row.names = FALSE)
pkgs[, c("Package", "Version", "Built")]
Sys.info()
Sys.info()$version
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
shiny::runApp('C:/Users/knigh/Documents/Test')
shiny::runApp('C:/Users/knigh/Documents/Test')
library("shiny")
runApp('C:/Users/knigh/Documents/Test')
install.packages("shinyWidgets")
library("shinyWidgets")
runApp('C:/Users/knigh/Documents/Test')
?verbatimTextOutput
pwd
getwd
getwd()
dat <- read.csv("C:/Users/knigh/OneDrive/Documents/Test/TestData.csv")
dat <- read.csv("C:/Users/knigh/Documents/Test/TestData.csv")
dat
View(dat)
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
?verbatimTextOutput
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
?renderPrint
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
runApp()
runApp()
runApp('C:/Users/knigh/Documents/Test')
runApp('C:/Users/knigh/Documents/Test')
read.csv("C:\Users\knigh\Documents\GenoToPheno\SelectionData.csv")
read.csv("C:/Users/knigh/Documents/GenoToPheno/SelectionData.csv")
dat <- read.csv("C:/Users/knigh/Documents/GenoToPheno/SelectionData.csv")
View(dat)
shiny::runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp()
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp()
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp()
runApp('C:/Users/knigh/Documents/GenoToPheno')
runApp('C:/Users/knigh/Documents/GenoToPheno')
str_split("Hi, I'm, Annabel", pattern = ", ")
library("stringr")
str_split("Hi, I'm, Annabel", pattern = ", ")
input = "Hi, I'm, Annabel"
grepl(comma, input)
comma <- ", "
grepl(comma, input)
input = "Hi"
grepl(comma, input)
output.df[1,2]
output.df[1,2]geneID = T
output.df[1,2]
output.df[1,2]geneID = T
shiny::runApp('C:/Users/knigh/Documents/AmexWebsiteDraft')
runApp('C:/Users/knigh/Documents/AmexWebsiteDraft')
runApp('C:/Users/knigh/Documents/AmexWebsiteDraft')
setwd("~/Fall 2021/Capstone/ShinyInputData")
runApp('C:/Users/knigh/Documents/AmexWebsiteDraft')
runApp('C:/Users/knigh/Documents/AmexWebsiteDraft')
setwd(C:\Users\knigh\Documents\AmexWebsiteDraft)
setwd("C:\Users\knigh\Documents\AmexWebsiteDraft")
setwd("C:/Users/knigh/Documents/AmexWebsiteDraft")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
