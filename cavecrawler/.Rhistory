# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
NA,
QTs[i],
NA,
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
}
}
}
}
# Create matrix into which QTL data should be read
QTL <- matrix(nrow = 0, ncol = 11)
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create matrix into which QTL data should be read
QTL <- data.frame(matrix(nrow = 0, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create vector of both possible separators between individual quantitative
# traits to later determine if multiple quantitative traits have been linked to
# a single marker
seps <- c(", ", '\\.')
# Iterate through each entry in Warren2021
for(r in 1:nrow(Warren2021)){
# Count how many publications have information for this marker AND how many
# QTL there are per publication and add the appropriate number of rows for
# this marker
for(study in 14:20){
# Check if the current marker has information for the current study
if(!is.na(Warren2021[r,study])){
# Create new row in QTL matrix with...
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
for(s in 1:length(seps)){
if(grepl(seps[s], Warren2021[r,study])){
# If there are MULTIPLE quantitative traits, split the quantitative
# traits into elements of a vector, add the first one to the existing
# row, then add a new row for each remaining trait
QTs <- str_split(Warren2021[r,study], seps[s])[[1]]
QTL$Quantitative_Trait[nrow(QTL)] <- QTs[1]
for(i in 2:length(QTs)){
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
NA,
QTs[i],
NA,
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
}
}
}
}
}
View(QTL)
# Create matrix into which QTL data should be read
QTL <- data.frame(matrix(nrow = 0, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create matrix into which QTL data should be read
QTL <- data.frame(matrix(nrow = 1, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create vector of both possible separators between individual quantitative
# traits to later determine if multiple quantitative traits have been linked to
# a single marker
seps <- c(", ", '\\.')
# Iterate through each entry in Warren2021
for(r in 1:nrow(Warren2021)){
# Count how many publications have information for this marker AND how many
# QTL there are per publication and add the appropriate number of rows for
# this marker
for(study in 14:20){
# Check if the current marker has information for the current study
if(!is.na(Warren2021[r,study])){
# Create new row in QTL matrix with...
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
for(s in 1:length(seps)){
if(grepl(seps[s], Warren2021[r,study])){
# If there are MULTIPLE quantitative traits, split the quantitative
# traits into elements of a vector, add the first one to the existing
# row, then add a new row for each remaining trait
QTs <- str_split(Warren2021[r,study], seps[s])[[1]]
QTL$Quantitative_Trait[nrow(QTL)] <- QTs[1]
for(i in 2:length(QTs)){
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
NA,
QTs[i],
NA,
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
}
}
}
}
}
length(seps)
# Create matrix into which QTL data should be read
QTL <- data.frame(matrix(nrow = 1, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create vector of both possible separators between individual quantitative
# traits to later determine if multiple quantitative traits have been linked to
# a single marker
seps <- c(", ", '\\.')
# Iterate through each entry in Warren2021
for(r in 1:nrow(Warren2021)){
# Count how many publications have information for this marker AND how many
# QTL there are per publication and add the appropriate number of rows for
# this marker
for(study in 14:20){
# Check if the current marker has information for the current study
if(!is.na(Warren2021[r,study])){
# Create new row in QTL matrix with...
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
for(s in 1:length(seps)){
if(grepl(seps[s], Warren2021[r,study])){
# If there are MULTIPLE quantitative traits, split the quantitative
# traits into elements of a vector, add the first one to the existing
# row, then add a new row for each remaining trait
QTs <- str_split(Warren2021[r,study], seps[s])[[1]]
QTL$Quantitative_Trait[nrow(QTL)] <- QTs[1]
for(i in 2:length(QTs)){
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
NA,
QTs[i],
NA,
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
# If you've reached the last separator and the marker still appears not
# to have multiple quantitative traits, simply add the current entry as
# the QT
}else if(!grepl(seps[s], Warren2021[r,study]) & (s == length(seps))){
QTL$Quantitative_Trait[nrow(QTL)] <- Warren2021[r,study]
}
}
}
}
}
View(QTL)
# Find all possible quantitative traits
AllQTs <- levels(as.factor(QTL$Quantitative_Trait))
AllQTs
# Create vector of both possible separators between individual quantitative
# traits to later determine if multiple quantitative traits have been linked to
# a single marker
seps <- c(",", '\\.')
# Create matrix into which QTL data should be read
QTL <- data.frame(matrix(nrow = 1, ncol = 11))
colnames(QTL) <- c("Marker",	"Scaffold",	"Linkage_Group",	"Cross",
"Start_Position_on_Scaffold",	"End_Position_on_Scaffold",
"LOD",	"Quantitative_Trait",	"Percent_Variance_Explained",
"Study_Specific_Information", "Publication")
# Create vector of both possible separators between individual quantitative
# traits to later determine if multiple quantitative traits have been linked to
# a single marker
seps <- c(",", '\\.')
# Iterate through each entry in Warren2021
for(r in 1:nrow(Warren2021)){
# Count how many publications have information for this marker AND how many
# QTL there are per publication and add the appropriate number of rows for
# this marker
for(study in 14:20){
# Check if the current marker has information for the current study
if(!is.na(Warren2021[r,study])){
# Create new row in QTL matrix with...
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
rep(NA, 3),
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
# Check if the current marker has multiple QTL for this study and add as
# many additional rows as there are additional QTL
for(s in 1:length(seps)){
if(grepl(seps[s], Warren2021[r,study])){
# If there are MULTIPLE quantitative traits, split the quantitative
# traits into elements of a vector, add the first one to the existing
# row, then add a new row for each remaining trait
QTs <- str_split(Warren2021[r,study], seps[s])[[1]]
QTL$Quantitative_Trait[nrow(QTL)] <- QTs[1]
for(i in 2:length(QTs)){
QTL <- rbind(QTL, c(
# The current marker
Warren2021$Marker.ID[r],
# The scaffold for the current marker
Warren2021$Scaffold.ID[r],
# The linkage group for the current marker
Warren2021$LG[r],
# The fish populations used in the F2 cross for the current study
Key$Cross[Key$Publication == colnames(Warren2021)[study]],
# The start and end positions of the marker on the scaffold
Warren2021$Scaffold.Alignmnet.Start[r],
Warren2021$Scaffold.Alignmnet.End[r],
# Filler NAs for the informartion to be added later
NA,
QTs[i],
NA,
# Study-specific information for the current publication
Key$Study_Specific_Information[Key$Publication == colnames(Warren2021)[study]],
# The name of the current publication
colnames(Warren2021)[study]))
}
# If you've reached the last separator and the marker still appears not
# to have multiple quantitative traits, simply add the current entry as
# the QT
}else if(!grepl(seps[s], Warren2021[r,study]) & (s == length(seps))){
QTL$Quantitative_Trait[nrow(QTL)] <- Warren2021[r,study]
}
}
}
}
}
# Find all possible quantitative traits
AllQTs <- levels(as.factor(QTL$Quantitative_Trait))
AllQTs
# Write the information to QTL.csv
write.csv(QTL, "QTL_remapped_noLOD.csv", row.names = F)
write.csv(AllQTs, "AllQTs.csv", row.names = F)
# The QTL function takes the following inputs:
chr_table <- read.csv("data/ChrTable.csv", fill = TRUE)
# TODO P: As you code the sub-modules AND the app, add any additional libraries
# here.
library(shiny)
library(shinyWidgets)
library(ggplot2)
setwd("C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler")
# The QTL function takes the following inputs:
chr_table <- read.csv("data/ChrTable.csv", fill = TRUE)
position_table <- read.csv("data/PositionTable.csv", fill = TRUE)
QTL_table <- read.csv("data/QTL.csv", fill = TRUE)
View(QTL_table)
GR.bool = T
GR.chr = "13"
GR.start = "35611239"
GR.end = "35611239"
# Vector into which warnings will be appended
QTL.wrnings <- c("Notes: ")
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Marker_Data <- data.frame(matrix(ncol = 9))
colnames(QTL_Marker_Data) <- c("Marker (Peak)", "Scaffold",
"Start Position on Scaffold",
"End Position on Scaffold", "LOD (Peak)",
"Quantitative Trait",
"Percent Variance Explained",
"Study-Specific Information", "Publication(s)")
# Dataframe for QTL marker(s) matching the user's search parameters
QTL_Gene_Data <- data.frame(matrix(ncol = 5))
colnames(QTL_Gene_Data) <- c("Gene", "Scaffold", "Start Locus", "End Locus",
"Publication")
# Object into which plots will be stored (This is currently a placeholder)
chr_plot <- ggplot()
MR.search_term <- "m6036"
MR.bool = T
if (MR.bool == T) {
marker_in_range <- F
for (i in 1:nrow(QTL_table)) {
if (MR.search_term == QTL_table$Marker[i]) {
GR.chr <- QTL_table$Chromosome[i]
GR.start <- (QTL_table$Start_Position_on_Chromosome[i] - MR.bp)
GR.end <- (QTL_table$End_Position_on_Chromosome[i] + MR.bp)
GR.bool <- T
marker_in_range <- T
break
}
}
if (marker_in_range == F) {
return("This marker is not found in data")
}
}
QTL_table$Chromosome[i]
QTL_table$Marker[i]
colnames(QTL_table)
QTL_table <- read.csv("data/QTL.csv", fill = TRUE)
View(QTL_table)
if (MR.bool == T) {
# TODO Edits for Zelun:
# 1. Function will fail as soon as the script encounters a marker not found
#    in the CSV
# 2. User doesn't need a warning for EVERY instance where a marker in the
#    CSV doesn't match the search parameters
marker_in_range <- F
for (i in 1:nrow(QTL_table)) {
if (MR.search_term == QTL_table$Marker[i]) {
GR.chr <- QTL_table$Chromosome[i]
GR.start <- (QTL_table$Start_Position_on_Chromosome[i] - MR.bp)
GR.end <- (QTL_table$End_Position_on_Chromosome[i] + MR.bp)
GR.bool <- T
marker_in_range <- T
break
}
}
if (marker_in_range == F) {
return("This marker is not found in data")
}
}
MR.bp <- 1
if (MR.bool == T) {
# TODO Edits for Zelun:
# 1. Function will fail as soon as the script encounters a marker not found
#    in the CSV
# 2. User doesn't need a warning for EVERY instance where a marker in the
#    CSV doesn't match the search parameters
marker_in_range <- F
for (i in 1:nrow(QTL_table)) {
if (MR.search_term == QTL_table$Marker[i]) {
GR.chr <- QTL_table$Chromosome[i]
GR.start <- (QTL_table$Start_Position_on_Chromosome[i] - MR.bp)
GR.end <- (QTL_table$End_Position_on_Chromosome[i] + MR.bp)
GR.bool <- T
marker_in_range <- T
break
}
}
if (marker_in_range == F) {
return("This marker is not found in data")
}
}
GR.chr
GR.start
GR.end
GR.bool
QTL_Marker_Data
i = 1
j = 2
# TODO Edits for Zelun
# As this is currently written, asigning a value to row 'j' of
# QTL_Marker_Data will fail if j > 1.
#  To Troubleshoor:
#   1. Set j = 2
#   2. Run lines 59-65 to define QTL_Marker_Data
#   3. Run this code: QTL_Marker_Data$`Marker (Peak)`[j] <- "enter anything here"
#   You'll get an error. Troubleshoot it.
#output this marker's info to the marker data frame, with j keeping track of order
QTL_Marker_Data$`Marker (Peak)`[j] <- QTL_table$Marker[i]
QTL_Gene_Data
# Now for each item in position table
for(i in 1:nrow(position_table)){
# TODO Edits for Zelun
# See edit on line 165
j <- 1
# if gene position is in range
if ((grepl(GR.chr,position_table$Scaffold[i])) &
(position_table$Start_Locus[i] >= as.numeric(GR.start)) &
(position_table$End_Locus[i] <= as.numeric(GR.end))) {
# add row in QTL_Gene_Data
QTL_Gene_Data$`Gene`[j] <- position_table$Gene_ID[i]
QTL_Gene_Data$`Scaffold`[j] <- position_table$Scaffold[i]
QTL_Gene_Data$`Start Locus`[j] <- position_table$Start_Locus[i]
QTL_Gene_Data$`End Locus`[j] <- position_table$End_Locus[i]
QTL_Gene_Data$`Publication`[j] <- "Warren_et_al_2021"
j <- j + 1
}
}
QTL_Gene_Data
MR.search_term = "random name"
MR.search_term
MR.search_term == QTL_table$Marker[i]
if (MR.bool == T) {
# TODO Edits for Zelun:
# 1. Function will fail as soon as the script encounters a marker not found
#    in the CSV. To troubleshoot, set MR.search_term = "random name"
# 2. User doesn't need a warning for EVERY instance where a marker in the
#    CSV doesn't match the search parameters
marker_in_range <- F
for (i in 1:nrow(QTL_table)) {
if (MR.search_term == QTL_table$Marker[i]) {
GR.chr <- QTL_table$Chromosome[i]
GR.start <- (QTL_table$Start_Position_on_Chromosome[i] - MR.bp)
GR.end <- (QTL_table$End_Position_on_Chromosome[i] + MR.bp)
GR.bool <- T
marker_in_range <- T
break
}
}
if (marker_in_range == F) {
return("This marker is not found in data")
}
}
