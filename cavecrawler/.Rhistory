XChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"X",mu.table)
print("Achiasmy, Y Fusions")
YAchiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,F,"Y",mu.table)
print("Chiasmy, Y Fusions")
YChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"Y",mu.table)
sim.rows <- sim.rows + (4*gen_no)
}
# Run simulation multiple times, storing output of each run as a new element in
# list
runs <- 10
pop_size <- 100
gen_no <- 1000
mu <- 0.01
s <- 0.9
# Get probabilities of 0, 1, 2, and 3 mutations in a generation
mu.table <- as.data.frame(
table(rbinom(n=100000, size=4*1587000, prob = mu))
)[1:4,2]/sum(as.data.frame(table(rbinom(n=100000, size=4*1587000, prob = mu)))[1:4,2])
XAchiasmaticResults <- matrix(nrow = runs*gen_no*4, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*runs)))
XChiasmaticResults <- XAchiasmaticResults
YAchiasmaticResults <- XAchiasmaticResults
YChiasmaticResults <- XAchiasmaticResults
sim.rows <- 1:(4*gen_no)
for(sim in 1:runs){
# Must keep redefining mutation rate for some reason
print(" ")
print(paste(c("Simulation: ", sim), collapse = ""))
print("Achiasmy, X Fusions")
XAchiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,F,"X",mu.table)
print("Chiasmy, X Fusions")
XChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"X",mu.table)
print("Achiasmy, Y Fusions")
YAchiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,F,"Y",mu.table)
print("Chiasmy, Y Fusions")
YChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"Y",mu.table)
sim.rows <- sim.rows + (4*gen_no)
}
# Run simulation multiple times, storing output of each run as a new element in
# list
runs <- 10
pop_size <- 100
gen_no <- 1000
mu <- 0.01
s <- 0.9
# Get probabilities of 0, 1, 2, and 3 mutations in a generation
mu.table <- as.data.frame(
table(rbinom(n=100000, size=4*1587000, prob = mu))
)[1:4,2]/sum(as.data.frame(table(rbinom(n=100000, size=4*1587000, prob = mu)))[1:4,2])
XAchiasmaticResults <- matrix(nrow = runs*gen_no*4, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*runs)))
XChiasmaticResults <- XAchiasmaticResults
YAchiasmaticResults <- XAchiasmaticResults
YChiasmaticResults <- XAchiasmaticResults
sim.rows <- 1:(4*gen_no)
for(sim in 1:runs){
# Must keep redefining mutation rate for some reason
print(" ")
print(paste(c("Simulation: ", sim), collapse = ""))
YAchiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,F,"Y",mu.table)
print("Chiasmy, Y Fusions")
YChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"Y",mu.table)
sim.rows <- sim.rows + (4*gen_no)
}
# Run simulation multiple times, storing output of each run as a new element in
# list
runs <- 10
pop_size <- 100
gen_no <- 1000
mu <- 0.01
s <- 0.9
# Get probabilities of 0, 1, 2, and 3 mutations in a generation
mu.table <- as.data.frame(
table(rbinom(n=100000, size=4*1587000, prob = mu))
)[1:4,2]/sum(as.data.frame(table(rbinom(n=100000, size=4*1587000, prob = mu)))[1:4,2])
XAchiasmaticResults <- matrix(nrow = runs*gen_no*4, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*runs)))
XChiasmaticResults <- XAchiasmaticResults
YAchiasmaticResults <- XAchiasmaticResults
YChiasmaticResults <- XAchiasmaticResults
sim.rows <- 1:(4*gen_no)
for(sim in 1:runs){
# Must keep redefining mutation rate for some reason
print(" ")
print("Chiasmy, Y Fusions")
YChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"Y",mu.table)
sim.rows <- sim.rows + (4*gen_no)
}
# Run simulation multiple times, storing output of each run as a new element in
# list
runs <- 5
pop_size <- 100
gen_no <- 1000
mu <- 0.01
s <- 0.9
# Get probabilities of 0, 1, 2, and 3 mutations in a generation
mu.table <- as.data.frame(
table(rbinom(n=100000, size=4*1587000, prob = mu))
)[1:4,2]/sum(as.data.frame(table(rbinom(n=100000, size=4*1587000, prob = mu)))[1:4,2])
XAchiasmaticResults <- matrix(nrow = runs*gen_no*4, ncol = pop_size,
dimnames = list(
rep(c("X-SDR", "X/Y-SDR", "X-FuseLocus", "X/Y-FuseLocus"),
gen_no*runs)))
XChiasmaticResults <- XAchiasmaticResults
YAchiasmaticResults <- XAchiasmaticResults
YChiasmaticResults <- XAchiasmaticResults
sim.rows <- 1:(4*gen_no)
for(sim in 1:runs){
# Must keep redefining mutation rate for some reason
print(" ")
print(paste(c("Simulation: ", sim), collapse = ""))
YChiasmaticResults[sim.rows,] <- Evolve(pop_size,gen_no,s,T,"Y",mu.table)
sim.rows <- sim.rows + (4*gen_no)
}
# For testing purposes
YChiasmaticResults.count <- matrix(nrow = runs, ncol = gen_no)
YChiasmaticResults.prop <- matrix(nrow = runs, ncol = gen_no)
for(sim in 1:nrow(YChiasmaticResults.count)){
print(paste(c("Sim: ", sim), collapse = ""))
for(gen in 1:ncol(YChiasmaticResults.count)){
YChiasmaticResults.count[sim, gen] <- sum(YChiasmaticResults[rows[4],] > 0)
Y.count <- sum(YChiasmaticResults[rows[2],])
YChiasmaticResults.prop[sim, gen] <- YChiasmaticResults.count[sim, gen]/Y.count
# Get rows for next set
rows <- rows + 4
}
}
X.count <- 0
Y.count <- 0
rows <- 1:4
for(sim in 1:nrow(YChiasmaticResults.count)){
print(paste(c("Sim: ", sim), collapse = ""))
for(gen in 1:ncol(YChiasmaticResults.count)){
YChiasmaticResults.count[sim, gen] <- sum(YChiasmaticResults[rows[4],] > 0)
Y.count <- sum(YChiasmaticResults[rows[2],])
YChiasmaticResults.prop[sim, gen] <- YChiasmaticResults.count[sim, gen]/Y.count
# Get rows for next set
rows <- rows + 4
}
}
plot(YChiasmaticResults.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y High mu High s",
col = col.vec[1])
col.vec <- viridis(num_sims)
col.vec <- viridis(num_sims)
plot(YChiasmaticResults.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y High mu High s",
col = col.vec[1])
library("viridisLite")
col.vec <- viridis(num_sims)
col.vec <- viridis(runs)
plot(YChiasmaticResults.prop[1,], type = "l", ylim=c(0,1),
xlab = "Generation", ylab = "Frequency Fusions",
main = "Chiasmatic Y High mu High s",
col = col.vec[1])
for(i in 2:nrow(CX_YChiasmaticResults.prop)){
lines(y = YChiasmaticResults.prop[i, ], x = 1:ncol(YChiasmaticResults.prop), col = col.vec[i])
}
for(i in 2:nrow(YChiasmaticResults.prop)){
lines(y = YChiasmaticResults.prop[i, ], x = 1:ncol(YChiasmaticResults.prop), col = col.vec[i])
}
swirl()
install.packages("swirl")
swirl()
??swirl
library("swirl")
swirl()
library(shiny); runApp('Summer 2022/CaveCrawler Maintenance/Example Apps/textOutput.R')
runApp('Summer 2022/CaveCrawler Maintenance/Example Apps/textOutput.R')
Latit_Longit_unedited <- data.frame(
Population = c("Pachon","Yerbaniz","Japonis","Arroyo","Tinaja","Curva","Toro",
"Chica","Molino","Caballo Moro","Subterraneo","Rio Frio",
"Arroyo Sarco", "Chamal","Rio Meco","Rio Tantaon","Rio Florido",
"Rio Tampaon","Nacimiento del Rio Santa Clara",
"San Rafael Los Castros","Rio Subterraneo Valley"),
Latitude = c(22.60,22.20,22.10,22.20,22.08,21.98,21.85,21.85,23.06,22.92,
22.10,22.99,22.02,22.84,22.82,22.37,21.98,21.85,22.50,22.75,22.13
),
Longitude = c(-99.05,-98.97,-98.95,-98.97,-98.95,-98.93,-98.93,-98.93,-99.16,
-99.20,-99.18,-99.15,-99.32,-99.20,-99.31,-98.90,-98.77,-98.94,-98.9,
-99.02,-99.17
),
Morph = c(rep("Cave",10), rep("Surface", 11))
)
# Rascon and Rio Choy data obtained from google maps
Latit_Longit <- rbind(Latit_Longit_unedited, data.frame(
Population = c("Rascon","Rio Choy"),
Latitude = c(21.9750,21.9998),
Longitude = c(-99.2578,-98.7785),
Morph = c("Surface","Surface")
))
Latit_Longit
write.csv("PopulationLocations.csv", Latit_Longit)
write.csv(Latit_Longit, "PopulationLocations.csv")
getwd()
setwd("C:\Users\knigh\Documents\GitHub\CaveCrawler\cavecrawler\data\PopulationLocations.csv")
setwd("C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler/data/PopulationLocations.csv")
setwd("C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler/data/")
################################## Load Data ###################################
# Dataframe of latitudes and longitudes for all morphs
# Citation:
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3282648/pdf/1471-2148-12-9.pdf
# Rascon and Rio Choy data obtained from google maps
Latit_Longit <- read.csv("PopulationLocations.csv")
Latit_Longit
################################## Load Data ###################################
# Dataframe of latitudes and longitudes for all morphs
# Citation:
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3282648/pdf/1471-2148-12-9.pdf
# Rascon and Rio Choy data obtained from google maps
Latit_Longit <- read.csv("PopulationLocations.csv", row.names = F)
################################## Load Data ###################################
# Dataframe of latitudes and longitudes for all morphs
# Citation:
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3282648/pdf/1471-2148-12-9.pdf
# Rascon and Rio Choy data obtained from google maps
Latit_Longit <- read.csv("PopulationLocations.csv")
Latit_Longit
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
setwd("C:/Users/knigh/OneDrive/Documents/Summer\ 2022/CaveCrawler\ Maintenance/Example\ Apps/")
# Read the desired table in as a dataframe
table_name <- read.csv("PopulationLocations.csv")
table_name
runApp('tableOutput.R')
runApp('tableOutput.R')
?radioButtons
as.factor(table_name$Population)
View(table_name)
View(table_name)
table_name[table_name$Morph == "Cave",]
library(shiny); runApp('radioButtons.R')
runApp('radioButtons.R')
runApp('radioButtons.R')
runApp('radioButtons.R')
runApp('radioButtons.R')
?checkboxGroupInput
levels(as.factor(table_name$Population))
runApp('checkboxGroupInput.R')
runApp('checkboxGroupInput.R')
runApp('checkboxGroupInput.R')
?sliderInput
table_name
runApp('sliderInput.R')
library(shiny); runApp('sliderInput_reactive.R')
# To get the minimum and maximum latitudes, we first must create an object
# WITHIN the renderUI which stores the latitudes from the table
lats <- table_name$Latitude
lats
runApp('sliderInput_reactive.R')
min.lat <- round(min(lats), 2)
min.lat
min.lat <- round(max(lats), 2)
min.lat
?sliderInput
runApp('sliderInput_reactive.R')
runApp('sliderInput_reactive.R')
runApp('searchInput.R')
runApp('searchInput.R')
# Unlike other input types, search inputs such as "search_term" are REACTIVE
# in that the possible value CHANGES based on the actions of the user. So,
# ANY object which calls upon the search term must be wrapped in a
# reactive() or observe() wrapper
table_out <- eventReactive(input$search_term, valueExpr = {
runApp('searchInput.R')
]
runApp('searchInput.R')
runApp('searchInput.R')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
packageVersion
packageVersion("Font Awesome")
packageVersion("shinyWidgets")
packageVersion("shinydashboard")
runApp('searchInput.R')
runApp('searchInput.R')
?searchInput
library(shiny)
# To use the "searchInput" function, you need a special library called
# shinyWidgets
library(shinyWidgets)
?searchInput
packageVersion("shinyWidgets")
runApp('searchInput.R')
table_name <- read.csv("PopulationLocations.csv")
input$search_term <- "Pachon"
input <- vector(mode = "list")
input$search_term <- "Pachon"
# Create a table with ONLY the rows whose "Population" column was searched
# for.
table_name[table_name$Population == input$search_term,]
runApp('searchInput.R')
grep(table_name$Population, input$search_term)
grep(input$search_term, table_name$Population)
grepl(input$search_term, table_name$Population)
# Create a table with ONLY the rows whose "Population" column was searched
# for.
table_name[grepl(input$search_term, table_name$Population),]
runApp('searchInput.R')
install_version("shinyWidgets","0.7.0")
install.packages("remotes")
library("remotes")
install_version("shinyWidgets","0.7.0")
table_name <- read.csv("PopulationLocations.csv")
plot(x = table_name$Latitude, y = table_name$Longitude)
# Create a plot of Longitude vs. Latitude
long_lat_plot <- plot(x = table_name$Latitude,
y = table_name$Longitude,
pch = 16)
long_lat_plot
plot(x = table_name$Latitude,
y = table_name$Longitude,
pch = 16)
library(shiny); runApp('plotOutput.R')
runApp('plotOutput.R')
plot(x = table_name$Latitude,
y = table_name$Longitude,
# "pch" changes the shape of the points on the plot
# http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r
pch = 16)
plot(x = table_name$Latitude,
y = table_name$Longitude,
# These change the labels of the X and Y axes
xlab = "Latitude",
ylab = "Longitude",
# "pch" changes the shape of the points on the plot
# http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r
pch = 16)
?renderPlot
?geom_label_repel
# All plots must be ggplot objects, so we need to load the ggplot2 package
library(ggplot2)
?geom_label_repel
# We need the following package to label points on our plot
library(ggrepel)
?geom_label_repel
library(shiny); runApp('plotOutput.R')
?downloadButton
runApp('download.R')
?conditionalPanel
library(shiny)
?conditionalPanel
runApp('conditional_panels.R')
runApp('conditional_panels.R')
runApp('conditional_panels.R')
runApp('conditional_panels.R')
runApp('conditional_panels.R')
runApp('busy_messages.R')
table_name <- read.csv("LargeTable.csv")
View(table_name)
input <- vector(mode = "list")
input$selection_id <- "hox"
grepl(input$selection_id, table_name$Gene.names)
sum(grepl(input$selection_id, table_name$Gene.names))
table_name[grepl(input$selection_id, table_name$Gene.names),]
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
View(table_name)
input$search_term
input$search_term <- "hox"
input$search_term
table_name[grepl(input$search_term, table_name$Gene.names),]
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('busy_messages.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('styling.R')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
library(shiny); runApp('main_side_panels.R')
runApp('main_side_panels.R')
runApp('main_side_panels.R')
?sidebarPanel
runApp('main_side_panels.R')
runApp('main_side_panels.R')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('main_side_panels.R')
runApp('main_side_panels.R')
runApp('main_side_panels.R')
runApp('main_side_panels.R')
runApp('beginner_styling.R')
runApp('main_side_panels.R')
runApp('beginner_styling.R')
runApp('beginner_styling.R')
shiny::runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/Example Apps/Advanced Shiny Example Apps/advanced_styling.R')
library(shiny); runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
paste("he", "llo")
paste("he", "llo", sep = "")
Sys.Date()
paste("Downloaded_from_CaveCrawler_on_", Sys.Date())
paste("Downloaded_from_CaveCrawler_on_",Sys.Date(),".csv",sep = "")
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
df <- read.csv("~/Summer 2022/CaveCrawler Maintenance/Example Apps/Beginner Shiny Example Apps/PopulationLocations.csv")
df
?write.csv
write.csv(x = df, file = "name_of_my_new_file.csv")
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('download.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
runApp('~/Summer 2022/CaveCrawler Maintenance/05_25_22 Meeting.R')
setwd("~/Summer 2022/CaveCrawler Maintenance")
runApp('05_25_22 Meeting.R')
?radioButtons
df
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
?conditionalPanel
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
?sidebarPanel
paste("he", "llO")
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
runApp('05_25_22 Meeting.R')
setwd("C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler)
""
"
setwd("C:/Users/knigh/Documents/GitHub/CaveCrawler/cavecrawler")
condition_control <- read.csv("data/Morph_Control_TranscData_SFRemapped.csv")
condition_control$Publication
condition_control$Publication[condition_control$Publication == "McGaugh_2020"] <- "5"
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
