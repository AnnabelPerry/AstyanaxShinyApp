}
}
# Redo graphs
# Pachon
Fig2A <- ggplot(GeneSearchOutput, aes(x=log.FC._Pachon.RioChoy, y=Fst_RioChoy.Pachon, color=Double_Outlier_Pachon)) +
geom_point(alpha = 0.5, aes(shape = Double_Outlier_AllCave)) +
guides(color=guide_legend(title="Transcriptional Change \nin Pachon"),
shape=guide_legend(title="Transcriptional Change \nin Molino, Tinaja, \nand Pachon?")) +
ylab("Fst Rio Choy-Pachon") +
xlab("logFC Pachon-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
# Molino
Fig2B <- ggplot(GeneSearchOutput, aes(x=log.FC._Molino.RioChoy, y=Fst_RioChoy.Molino, color=Double_Outlier_Molino)) +
geom_point(alpha = 0.5, aes(shape = Double_Outlier_AllCave)) +
guides(color=guide_legend(title="Transcriptional Change \nin Molino"),
shape=guide_legend(title="Transcriptional Change \nin Molino, Tinaja, \nand Pachon?")) +
ylab("Fst Rio Choy-Molino") +
xlab("logFC Molino-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2)) +
theme_bw()
# Tinaja
Fig2C <- ggplot(GeneSearchOutput, aes(x=log.FC._Tinaja.RioChoy, y=Fst_RioChoy.Tinaja, color=Double_Outlier_Tinaja)) +
geom_point(alpha = 0.5, aes(shape = Double_Outlier_AllCave)) +
guides(color=guide_legend(title="Transcriptional Change \nin Tinaja"),
shape=guide_legend(title="Transcriptional Change \nin Molino, Tinaja, \nand Pachon?")) +
ylab("Fst Rio Choy-Tinaja") +
xlab("logFC Tinaja-Rio Choy") +
#scale_x_continuous(limits=c(-2,2)) +
theme_bw()
library(ggpubr)
ggarrange(Fig2A, Fig2B, Fig2C,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2,
align = "v")
# Supplemental
setwd("~/Fall 2021/Capstone/Perry et al. 2021")
write.csv(GeneSearchOutput, "SupplementalTable3_OverlapGenes-11-27.csv")
# Gene names for double outliers
double_P <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Pachon == "Significant"]
double_T <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Tinaja == "Significant"]
double_M <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Molino == "Significant"]
# Rerun GO analysis
double_all_IDs <- GeneSearchOutput$Gene.Stable.ID[
GeneSearchOutput$Double_Outlier_AllCave == "Significant"]
nrow(GeneSearchOutput)
######### Double-check that you're including ALL and ONLY outlier genes ########
# Of the genes outputted by population genetics, find all the ones for which you
# are missing transcription data
setwd("~/Fall 2021/Capstone/AnalysisFiles")
PopGenOutput <- read.csv("CaveCrawler-Outliers-AllFstAllMorphsWithOutlier.csv")
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
GeneSearchOutput <- read.csv("GeneSearch-11-26-combinedCSVs.csv")
# Add row to GeneSearchOutput to describe all morphs for which this gene is an
# outlier
GeneSearchOutput$Fst_Outlier <- rep(NA,nrow(GeneSearchOutput))
# Convert all parentheticals to just gene names
library(stringr)
for(i in 1:length(PopGenOutput$Gene.Name)){
if(length(grep("of", PopGenOutput$Gene.Name[i])) != 0){
temp <- str_split(PopGenOutput$Gene.Name[i], fixed(" ("))
PopGenOutput$Gene.Name[i] <- temp[[1]][1]
}else{
next
}
}
missing_genes <- PopGenOutput$Gene.Name[!(PopGenOutput$Gene.Name %in% GeneSearchOutput$Gene.Name)]
# Obtain the transcription and popgen data for the missing genes and add to data
# frame
setwd("C:/Users/knigh/Documents/GitHub/AstyanaxShinyApp")
HS13 <- read.csv("data/Herman_etal_2018_S13.csv")
names(HS13)[1] <- "Stable_Gene_ID"
HS13$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Fst_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Publication <- rep("1", nrow(HS13))
HS13$Gene_Name <- tolower(HS13$Gene_Name)
# Remove all relevant rows which are NA
HS13 <- HS13[!is.na(as.numeric(HS13$Fst_RioChoy.Molino))
& !is.na(as.numeric(HS13$Fst_RioChoy.Pachon))
& !is.na(as.numeric(HS13$Fst_RioChoy.Tinaja))
& !is.na(HS13$Gene_Name),]
morph1.morph2 <- read.csv("data/Transcription_Macketal2020.csv")
morph1.morph2 <- morph1.morph2[,-1]
morph1.morph2$Publication <- rep("4", nrow(morph1.morph2))
# Remove all rows where relevant columns are NA
morph1.morph2 <- morph1.morph2[!is.na(as.numeric(morph1.morph2$logFC))
& !is.na(as.numeric(morph1.morph2$PValue)),]
# Retain only the missing genes for which you have both transcription,
# popgen data, and data on being an outlier
missing_genes <- missing_genes[(missing_genes %in% HS13$Gene_Name)
& (missing_genes %in% morph1.morph2$Gene_name)]
final_missing_genes <- c()
for(i in 1:length(missing_genes)){
if(!is.na(HS13$Fst_Outliers[HS13$Gene_Name == missing_genes[i]])){
final_missing_genes <- missing_genes[i]
}else{
next
}
}
# Remove unnecessary columns from the GeneSearchOutput dataframe and remove NA
# rows
GeneSearchOutput <- GeneSearchOutput[,c(1:2,20:22,40:42,43:45)]
GeneSearchOutput$log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy)
GeneSearchOutput$log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy)
GeneSearchOutput$log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy)
GeneSearchOutput$Fst_RioChoy.Pachon <- as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon)
GeneSearchOutput$Fst_RioChoy.Molino <- as.numeric(GeneSearchOutput$Fst_RioChoy.Molino)
GeneSearchOutput$Fst_RioChoy.Tinaja <- as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja)
GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)
GeneSearchOutput <- GeneSearchOutput[
!is.na(as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy))
&!is.na(as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Molino))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)),
]
nrow(GeneSearchOutput)
# Add 4 columns to the GeneSearchOutput dataframe:
# 1. Fst + Transcription outlier in Pachon:RioChoy
# 2. Fst + Transcription outlier in Molino:RioChoy
# 3. Fst + Transcription outlier in Tinaja:RioChoy
# 4. Fst + Transcription outlier in all three morphs
GeneSearchOutput$Double_Outlier_Pachon <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_Molino <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_Tinaja <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_AllCave <- rep("NA",nrow(GeneSearchOutput))
# Remove all datapoints for which you do not have outlier info
PopGenOutput <- PopGenOutput[!is.na(PopGenOutput$Outlier..if.Fst.),]
GeneSearchOutput <- GeneSearchOutput[GeneSearchOutput$Gene.Name %in% PopGenOutput$Gene.Name,]
GeneSearchOutput <- GeneSearchOutput[!duplicated(GeneSearchOutput$Gene.Stable.ID),]
nrow(GeneSearchOutput)
View(HS13)
AtZero <- HS13[((HS13$Fst_RioChoy.Molino == 0) | (HS13$Fst_RioChoy.Pachon == 0) | (HS13$Fst_RioChoy.Tinaja == 0)) & (length(grep("NA",HS13$Fst_Outliers)) == 0), ]
View(AtZero)
######### Double-check that you're including ALL and ONLY outlier genes ########
# Of the genes outputted by population genetics, find all the ones for which you
# are missing transcription data
setwd("~/Fall 2021/Capstone/AnalysisFiles")
PopGenOutput <- read.csv("CaveCrawler-Outliers-AllFstAllMorphsWithOutlier.csv")
nrow(PopGenOutput )
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
GeneSearchOutput <- read.csv("GeneSearch-11-26-combinedCSVs.csv")
PGNoDup <- PopGenOutput[!duplicated(PopGenOutput$Gene.Name),]
nrow(PGNoDup)
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
GeneSearchOutput <- read.csv("GeneSearch-11-26-combinedCSVs.csv")
nrow(GeneSearchOutput[!duplicated(GeneSearchOutput$Gene.Name),])
# Add row to GeneSearchOutput to describe all morphs for which this gene is an
# outlier
GeneSearchOutput$Fst_Outlier <- rep(NA,nrow(GeneSearchOutput))
# Convert all parentheticals to just gene names
library(stringr)
for(i in 1:length(PopGenOutput$Gene.Name)){
if(length(grep("of", PopGenOutput$Gene.Name[i])) != 0){
temp <- str_split(PopGenOutput$Gene.Name[i], fixed(" ("))
PopGenOutput$Gene.Name[i] <- temp[[1]][1]
}else{
next
}
}
# Remove unnecessary columns from the GeneSearchOutput dataframe and remove NA
# rows
GeneSearchOutput <- GeneSearchOutput[,c(1:2,20:22,40:42,43:45)]
GeneSearchOutput$log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy)
GeneSearchOutput$log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy)
GeneSearchOutput$log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy)
GeneSearchOutput$Fst_RioChoy.Pachon <- as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon)
GeneSearchOutput$Fst_RioChoy.Molino <- as.numeric(GeneSearchOutput$Fst_RioChoy.Molino)
GeneSearchOutput$Fst_RioChoy.Tinaja <- as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja)
GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)
GeneSearchOutput <- GeneSearchOutput[
!is.na(as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy))
&!is.na(as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Molino))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)),
]
nrow(GeneSearchOutput)
GeneSearchOutput <- GeneSearchOutput[!duplicated(GeneSearchOutput$Gene.Stable.ID),]
nrow(GeneSearchOutput)
View(PopGenOutput)
Fst_data <- PopGenOutput[(length(grep("NA",PopGenOutput$Outlier..if.Fst.)) == 0),]
Fst_data <- PopGenOutput[(length(grep("NA",PopGenOutput$Outlier..if.Fst.)) == 0) & !is.na(PopGenOutput$Outlier..if.Fst.),]
nodupFst <- Fst_data[!duplicated(Fst_data),]
nodupFst <- Fst_data[!duplicated(Fst_data$Gene.Name),]
View(nodupFst)
write.csv(nodupFst)
write.csv(nodupFst,"PopGenFstOutlierNoDuplicates.csv")
library(shiny); runApp('C:/Users/knigh/Documents/GitHub/AstyanaxShinyApp/CaveCrawler.R')
# CaveCrawler: Searched for the genes in "PopGenFstOutlierNoDuplicates.csv" and
# got the CSV "CaveCrawler-GeneSearch-FstData.csv"
setwd("~/Fall 2021/Capstone/Perry et al. 2021")
GeneSearchOutput <- read.csv("CaveCrawler-GeneSearch-FstData.csv")
# Filtered to just the genes for which you have both transcription AND Fst data
GeneSearchOutput <- GeneSearchOutput[,c(1:2,20:22,40:42,43:45)]
GeneSearchOutput$log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy)
GeneSearchOutput$log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy)
GeneSearchOutput$log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy)
GeneSearchOutput$Fst_RioChoy.Pachon <- as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon)
GeneSearchOutput$Fst_RioChoy.Molino <- as.numeric(GeneSearchOutput$Fst_RioChoy.Molino)
GeneSearchOutput$Fst_RioChoy.Tinaja <- as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja)
GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy)
GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy <- as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)
GeneSearchOutput <- GeneSearchOutput[
!is.na(as.numeric(GeneSearchOutput$log.FC._Pachon.RioChoy))
&!is.na(as.numeric(GeneSearchOutput$log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$log.FC._Tinaja.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Pachon))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Molino))
& !is.na(as.numeric(GeneSearchOutput$Fst_RioChoy.Tinaja))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy))
& !is.na(as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy)),
]
nrow(GeneSearchOutput)
GeneSearchOutput <- GeneSearchOutput[!duplicated(GeneSearchOutput$Gene.Stable.ID),]
# Add 4 columns to the GeneSearchOutput dataframe:
# 1. Fst + Transcription outlier in Pachon:RioChoy
# 2. Fst + Transcription outlier in Molino:RioChoy
# 3. Fst + Transcription outlier in Tinaja:RioChoy
# 4. Fst + Transcription outlier in all three morphs
GeneSearchOutput$Double_Outlier_Pachon <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_Molino <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_Tinaja <- rep("NA",nrow(GeneSearchOutput))
GeneSearchOutput$Double_Outlier_AllCave <- rep("NA",nrow(GeneSearchOutput))
# Find all double outliers
for(i in 1:nrow(GeneSearchOutput)){
# If the gene has a significant p-value for Pachon logFC AND contains
# RioChoy-Pachon in the corresponding "Fst_Outlier" column of
# GeneSearchOutput, mark it as a double outlier in Pachon
if((as.numeric(GeneSearchOutput$p.value.for.log.FC._Pachon.RioChoy[i]) < 0.05)
& (length(grep("RioChoy-Pachon",
PopGenOutput$Outlier..if.Fst.[
(PopGenOutput$Gene.Name == GeneSearchOutput$Gene.Name[i])
& (PopGenOutput$Population.s. == "Pachon-RioChoy")])) != 0)){
GeneSearchOutput$Double_Outlier_Pachon[i] <- "Double Outlier"
sig_P = T
}else{
GeneSearchOutput$Double_Outlier_Pachon[i] <- "Not a Double Outlier"
sig_P = F
}
# If the gene has a significant p-value for Molino logFC AND contains
# RioChoy-Molino in the corresponding "Fst_Outlier" column of
# GeneSearchOutput, mark it as a double outlier in Molino
if((as.numeric(GeneSearchOutput$p.value.for.log.FC._Molino.RioChoy[i]) < 0.05)
& (length(grep("RioChoy-Molino",
PopGenOutput$Outlier..if.Fst.[
(PopGenOutput$Gene.Name == GeneSearchOutput$Gene.Name[i])
& (PopGenOutput$Population.s. == "Molino-RioChoy")])) != 0)){
GeneSearchOutput$Double_Outlier_Molino[i] <- "Double Outlier"
sig_M = T
}else{
GeneSearchOutput$Double_Outlier_Molino[i] <- "Not a Double Outlier"
sig_M = F
}
# If the gene has a significant p-value for Tinaja logFC AND contains
# RioChoy-Tinaja in the corresponding "Fst_Outlier" column of
# GeneSearchOutput, mark it as a double outlier in Tinaja
if((as.numeric(GeneSearchOutput$p.value.for.log.FC._Tinaja.RioChoy[i]) < 0.05)
& (length(grep("RioChoy-Tinaja",
PopGenOutput$Outlier..if.Fst.[
(PopGenOutput$Gene.Name == GeneSearchOutput$Gene.Name[i])
& (PopGenOutput$Population.s. == "RioChoy-Tinaja")])) != 0)){
GeneSearchOutput$Double_Outlier_Tinaja[i] <- "Double Outlier"
sig_T = T
}else{
GeneSearchOutput$Double_Outlier_Tinaja[i] <- "Not a Double Outlier"
sig_T = F
}
# If the gene has a significant p-value for all 3 logFCs and contains
# RioChoy-Tinaja, RioChoy-Pachon, AND RioChoy-Pachon in Fst outlier column
# of GeneSearchOutput, mark it as a double outlier for all three morphs
if(sig_P & sig_M & sig_T){
GeneSearchOutput$Double_Outlier_AllCave[i] <- "Double Outlier"
}else{
GeneSearchOutput$Double_Outlier_AllCave[i] <- "Not a Double Outlier"
}
}
ggplot(GeneSearchOutput, aes(x=log.FC._Pachon.RioChoy, y=Fst_RioChoy.Pachon, color=Double_Outlier_Pachon)) +
geom_point(alpha = 0.5) +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Pachon") +
xlab("logFC Pachon-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Molino.RioChoy, y=Fst_RioChoy.Molino, color=Double_Outlier_Molino)) +
geom_point(alpha = 0.5) +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Molino") +
xlab("logFC Molino-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Molino.RioChoy, y=Fst_RioChoy.Molino, color=Double_Outlier_Molino)) +
geom_point(alpha = 0.5) +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Molino") +
xlab("logFC Molino-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Tinaja.RioChoy, y=Fst_RioChoy.Tinaja, color=Double_Outlier_Tinaja)) +
geom_point(alpha = 0.5) +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Tinaja") +
xlab("logFC Tinaja-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Tinaja.RioChoy, y=Fst_RioChoy.Tinaja, color=Double_Outlier_Tinaja)) +
geom_point(alpha = 0.5) +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Tinaja") +
xlab("logFC Tinaja-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2.5)) +
theme_bw()
# Gene names for double outliers
double_P <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Pachon == "Double Outlier"]
double_T <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Tinaja == "Double Outlier"]
double_M <- GeneSearchOutput$Gene.Name[
GeneSearchOutput$Double_Outlier_Molino == "Double Outlier"]
double_P
double_T
double_M
# Table of double outliers
all_DOs <- c(double_P, double_M, double_T)
all_DOs <- all_DOs[!duplicated(all_DOs)]
all_DOs
stats_AllDOs <- GeneSearchOutput[GeneSearchOutput$Gene.Name %in% all_DOs,]
stats_AllDOs
write.csv(stats_AllDOs, "Table1_Perry2021.csv")
ggplot(GeneSearchOutput, aes(x=log.FC._Pachon.RioChoy, y=Fst_RioChoy.Pachon, color=Double_Outlier_Pachon)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=21,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Pachon") +
xlab("logFC Pachon-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Pachon.RioChoy, y=Fst_RioChoy.Pachon, color=Double_Outlier_Pachon)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=1,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Pachon") +
xlab("logFC Pachon-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
# Pachon
Fig2A <- ggplot(GeneSearchOutput, aes(x=log.FC._Pachon.RioChoy, y=Fst_RioChoy.Pachon, color=Double_Outlier_Pachon)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=1,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Pachon") +
xlab("logFC Pachon-Rio Choy") +
scale_x_continuous(limits=c(-2,2)) +
theme_bw()
# Molino
Fig2B <- ggplot(GeneSearchOutput, aes(x=log.FC._Molino.RioChoy, y=Fst_RioChoy.Molino, color=Double_Outlier_Molino)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=1,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Molino") +
xlab("logFC Molino-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2)) +
theme_bw()
# Tinaja
Fig2C <- ggplot(GeneSearchOutput, aes(x=log.FC._Tinaja.RioChoy, y=Fst_RioChoy.Tinaja, color=Double_Outlier_Tinaja)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=1,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Tinaja") +
xlab("logFC Tinaja-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2.5)) +
theme_bw()
ggplot(GeneSearchOutput, aes(x=log.FC._Tinaja.RioChoy, y=Fst_RioChoy.Tinaja, color=Double_Outlier_Tinaja)) +
geom_point(alpha = 0.5) +
# Add open circle around arpin
geom_point(data=GeneSearchOutput %>% filter(Double_Outlier_AllCave == "Double Outlier"),
pch=1,
size=4,
colour="red") +
guides(color=guide_legend(title="")) +
ylab("Fst Rio Choy-Tinaja") +
xlab("logFC Tinaja-Rio Choy") +
scale_x_continuous(limits=c(-2.5,2.5)) +
theme_bw()
# All genes for which you had data
write.csv(GeneSearchOutput,"AllGenesWithData.csv")
Fig2A
# Create a dataframe with the following columns:
# 1. Gene name
# 2. Pachon:Rio Choy Fst Value
# 3. Pachon:Rio Choy logFC Value
# 4. Double Outlier (Boolean)
plot_df <- data.frame(matrix(ncol = 4, nrow = length(overlap_genes)))
names(plot_df) <- c("Gene","logFC","Fst","Double_Outlier")
for(i in 1:length(overlap_genes)){
plot_df$Gene[i] <- overlap_genes[i]
plot_df$logFC[i] <- transc$logFC[(transc$Comparison == "Pachon-Rio Choy") &
(transc$Gene_name == overlap_genes[i])]
plot_df$Fst[i] <- popgen$Fst_RioChoy.Pachon[popgen$Gene_Name == overlap_genes[i]]
if(overlap_genes[i] %in% Top10Fst$Gene.Name){
plot_df$Double_Outlier[i] <- "Yes"
}else{
plot_df$Double_Outlier[i] <- "No"
}
}
setwd("C:/Users/knigh/Documents/GitHub/cavecrawler/cavecrawler/")
# Transcription data describing logFC between morphs
transc <- read.csv("data/Transcription_Macketal2020.csv")
transc <- transc[,-1]
transc$Publication <- rep("4", nrow(transc))
# Create a dataframe with the following columns:
# 1. Gene name
# 2. Pachon:Rio Choy Fst Value
# 3. Pachon:Rio Choy logFC Value
# 4. Double Outlier (Boolean)
plot_df <- data.frame(matrix(ncol = 4, nrow = length(overlap_genes)))
names(plot_df) <- c("Gene","logFC","Fst","Double_Outlier")
for(i in 1:length(overlap_genes)){
plot_df$Gene[i] <- overlap_genes[i]
plot_df$logFC[i] <- transc$logFC[(transc$Comparison == "Pachon-Rio Choy") &
(transc$Gene_name == overlap_genes[i])]
plot_df$Fst[i] <- popgen$Fst_RioChoy.Pachon[popgen$Gene_Name == overlap_genes[i]]
if(overlap_genes[i] %in% Top10Fst$Gene.Name){
plot_df$Double_Outlier[i] <- "Yes"
}else{
plot_df$Double_Outlier[i] <- "No"
}
}
install.packages("ggplot2")
install.packages("scales")
shiny::runApp()
install.packages("shinyWidgets")
runApp()
install.packages("plotly")
install.packages("WVPlots")
install.packages("stringr")
install.packages("tibble")
install.packages("tibble")
install.packages("gridExtra")
install.packages("dplyr")
install.packages("maps")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?renderText
?textOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tableOutput
runApp()
runApp()
runApp()
?gsub
foo <- c("G.G")
gsub(pattern = ".", replacement = " ", x = foo)
foo <- gsub(pattern = ".", replacement = " ", x = foo)
foo
foo <- c("G.G")
foo <- sub(pattern = ".", replacement = " ", x = foo)
foo
Community_Data <- read.csv("data/CommunityData.csv")
colnames(Community_Data)
gsub(pattern = ".", replacement = " ", x = colnames(Community_Data))
gsub(pattern = ".", replacement = " ", x = colnames(Community_Data), fixed = T)
# Replace periods with spaces
colnames(Community_Data) <- gsub(pattern = ".", replacement = " ",
x = colnames(Community_Data), fixed = T)
Community_Data
runApp()
