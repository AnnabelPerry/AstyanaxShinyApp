pub_names <- c(NA)
# If number of copies of gene in statistic data is 0, copy the gene at
# least once so at least one copy is present for transcription data
if(num_stat_copies == 0){
num_stat_copies = 1
}
# Create temporary dataframe to later be bound to final df
temp.df <- data.frame(matrix(nrow = num_stat_copies, ncol = 44))
# Store input and associated values in appropriate objects and mark input
# as a gene ID
temp.df[,1] = rep(all.genes_IDs$all_genes[
all.genes_IDs$all_IDs == input], num_stat_copies)
temp.df[,2] = rep(input, num_stat_copies)
# If the current gene is present in the position table, output position
# table info. If not, output all NA
if(temp.df[1,2] %in% position_table$Gene_Name){
temp.df[,3] = rep(position_table$Scaffold[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
temp.df[,4] = rep(position_table$Start_Locus[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
temp.df[,5] = rep(position_table$End_Locus[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
}else{
temp.df[,3:5] = rep(NA, num_stat_copies)
}
# Check if gene is present in GO term table. If so, output GO terms. If
# not, output NA
if(temp.df[1,2] %in% GeneToGO$Gene.names){
temp.df[,7] = rep(GeneToGO$Gene.ontology.IDs[
GeneToGO$Gene.names == temp.df[1,2]], num_stat_copies)
}else{
temp.df[,7] = rep(NA, num_stat_copies)
}
# Check if gene is present in stat table. If so, output info. If not,
# output NAs
if(input %in% stat_table$Stable_Gene_ID){
pub_names = append(pub_names,
stat_table$Publication_Name[stat_table$Stable_Gene_ID == input])
pub_names = pub_names[!is.na(pub_names)]
temp.df[,6] = stat_table$Gene_Description[stat_table$Stable_Gene_ID == input]
temp.df[,8] = stat_table$Pi_RioChoy[stat_table$Stable_Gene_ID == input]
temp.df[,9] = stat_table$Pi_Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,10] = stat_table$Pi_Molino[stat_table$Stable_Gene_ID == input]
temp.df[,11] = stat_table$Pi_Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,12] = stat_table$Pi_Rascon[stat_table$Stable_Gene_ID == input]
temp.df[,13] = stat_table$Dxy_RioChoy.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,14] = stat_table$Dxy_RioChoy.Molino[stat_table$Stable_Gene_ID == input]
temp.df[,15] = stat_table$Dxy_RioChoy.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,16] = stat_table$Dxy_Rascon.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,17] = stat_table$Dxy_Rascon.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,18] = stat_table$Dxy_Chica1.Chica2[stat_table$Stable_Gene_ID == input]
temp.df[,19] = stat_table$Fst_RioChoy.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,20] = stat_table$Fst_RioChoy.Molino[stat_table$Stable_Gene_ID == input]
temp.df[,21] = stat_table$Fst_RioChoy.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,22] = stat_table$Fst_Pachon.Rascon[stat_table$Stable_Gene_ID == input]
temp.df[,23] = stat_table$Fst_Rascon.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,24] = stat_table$Fst_Chica1.Chica2[stat_table$Stable_Gene_ID == input]
temp.df[,25] = stat_table$TajimasD_RioChoy[stat_table$Stable_Gene_ID == input]
temp.df[,26] = stat_table$TajimasD_Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,27] = stat_table$TajimasD_Molino[stat_table$Stable_Gene_ID == input]
temp.df[,28] = stat_table$TajimasD_Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,29] = stat_table$TajimasD_Rascon[stat_table$Stable_Gene_ID == input]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:29] = rep(NA, num_stat_copies)
}
# Check if current ID is found in transcription data. If so, output
# associated information. If not, output NAs
if(input %in% condition_control$Gene_stable_ID){
pub_names = append(pub_names,
condition_control$Publication[condition_control$Gene_stable_ID == input])
pub_names = pub_names[!is.na(pub_names)]
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))]) != 0){
temp.df[,30] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
temp.df[,34] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,30] = rep(NA, num_stat_copies)
temp.df[,34] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))]) != 0){
temp.df[,31] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
temp.df[,35] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,31] = rep(NA, num_stat_copies)
temp.df[,35] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
}else{
temp.df[,30:37] = rep(NA, num_stat_copies)
}
# Check if current ID is found in morph:morph transcription data.
# If so, output associated information in columns 38-43 and in pub_names
if(input %in% morph1.morph2$Gene_stable_ID){
pub_names = append(pub_names,
morph1.morph2$Publication[morph1.morph2$Gene_stable_ID == input][1])
pub_names = pub_names[!is.na(pub_names)]
# Check if the current gene has a Pachon-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")]) != 0){
temp.df[,38] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
temp.df[,41] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
}else{
temp.df[,38] = rep(NA, num_stat_copies)
temp.df[,41] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Molino-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Molino-Rio Choy")]) != 0){
temp.df[,39] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
temp.df[,42] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
}else{
temp.df[,39] = rep(NA, num_stat_copies)
temp.df[,42] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Tinaja-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")]) != 0){
temp.df[,40] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
temp.df[,43] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_stable_ID == input) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
}else{
temp.df[,40] = rep(NA, num_stat_copies)
temp.df[,43] = rep(NA, num_stat_copies)
}
}else{
temp.df[,38:43] = rep(NA, num_stat_copies)
}
geneID = T
geneName = F
# Add pubnames to appropriate column
temp.df[,44] <- paste(pub_names, collapse = "; ")
output.df <- rbind(output.df, temp.df)
}else if(!(input %in% all.genes_IDs$all_genes) &
!(input %in% all.genes_IDs$all_IDs)){
geneName = F
geneID = F
}
}
# If the input string contains NO commas but is not WHOLLY comprised of IDs or
# names, consider the string a phrase
if((!geneID) & (!geneName)){
# Find all gene names whose description, GO terms, or gene name contains the
# phrase-of-interest
# Must first check if phrase is found in any column-of-interest prior to
# appending phrase to column of interest
input_vec <- c()
if((sum(grepl(input, stat_table$Gene_Description)) != 0) |
(sum(grepl(input, stat_table$GO_Terms)) != 0)){
input_vec <- append(input_vec, stat_table$Gene_Name[
(grepl(input, stat_table$Gene_Description)) |
(grepl(input, stat_table$GO_Terms))]
)
}
if((sum(grepl(input, GeneToGO$Gene.ontology..biological.process.)) != 0) |
(sum(grepl(input, GeneToGO$Gene.ontology..cellular.component.)) != 0) |
(sum(grepl(input, GeneToGO$Gene.ontology..molecular.function.)) != 0)){
input_vec <- append(input_vec,
c(GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..biological.process.)
],
GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..cellular.component.)
],
GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..molecular.function.)
]
)
)
}
if(sum(grepl(input, all.genes_IDs$all_genes)) != 0){
input_vec <- append(input_vec,
all.genes_IDs$all_genes[grepl(input,
all.genes_IDs$all_genes)])
}
# Remove duplicate genes from input vector
input_vec <- input_vec[!duplicated(input_vec)]
# If no gene descriptions contain the phrase, return an error
if(length(input_vec) == 0){
return(paste(c("ERROR: No genes-of-interest can be described by the phrase",
input), collapse = " "))
}
# For each gene, collect all values associated with the gene
for(i in 1:length(input_vec)){
# Find number of copies of this gene in stat table
num_stat_copies <- sum(str_count(stat_table$Gene_Name, input_vec[i]))
# If number of copies of gene in statistic data is 0, copy the gene at
# least once so at least one copy is present for transcription data
if(num_stat_copies == 0){
num_stat_copies = 1
}
# Create temporary dataframe to be appended to final
temp.df <- data.frame(matrix(nrow = num_stat_copies, ncol = 44))
temp.df[,1] = rep(input_vec[i], num_stat_copies)
if(input_vec[i] %in% all.genes_IDs$all_genes){
temp.df[,2] = rep(all.genes_IDs$all_IDs[
all.genes_IDs$all_genes == input_vec[i]], num_stat_copies)
}else{
temp.df[,2] = rep(NA, num_stat_copies)
}
# If the current gene is present in the position table, output position
# table info. If not, output all NA
if(input_vec[i] %in% position_table$Gene_Name){
temp.df[,3] = rep(position_table$Scaffold[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
temp.df[,4] = rep(position_table$Start_Locus[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
temp.df[,5] = rep(position_table$End_Locus[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
}else{
temp.df[,3:5] = rep(NA, num_stat_copies)
}
# Check if gene is present in GO term table. If so, output GO terms. If
# not, output NA
if(input_vec[i] %in% GeneToGO$Gene.names){
temp.df[,7] = rep(GeneToGO$Gene.ontology.IDs[
GeneToGO$Gene.names == input_vec[i]], num_stat_copies)
}else{
temp.df[,7] = rep(NA, num_stat_copies)
}
# Check if gene is present in stat table. If so, output info. If not,
# output NAs
if(input_vec[i] %in% stat_table$Gene_Name){
pub_names = append(pub_names,
stat_table$Publication_Name[stat_table$Gene_Name == input_vec[i]])
pub_names = pub_names[!is.na(pub_names)]
temp.df[,6] = stat_table$Gene_Description[stat_table$Gene_Name == input_vec[i]]
temp.df[,8] = stat_table$Pi_RioChoy[stat_table$Gene_Name == input_vec[i]]
temp.df[,9] = stat_table$Pi_Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,10] = stat_table$Pi_Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,11] = stat_table$Pi_Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,12] = stat_table$Pi_Rascon[stat_table$Gene_Name == input_vec[i]]
temp.df[,13] = stat_table$Dxy_RioChoy.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,14] = stat_table$Dxy_RioChoy.Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,15] = stat_table$Dxy_RioChoy.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,16] = stat_table$Dxy_Rascon.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,17] = stat_table$Dxy_Rascon.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,18] = stat_table$Dxy_Chica1.Chica2[stat_table$Gene_Name == input_vec[i]]
temp.df[,19] = stat_table$Fst_RioChoy.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,20] = stat_table$Fst_RioChoy.Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,21] = stat_table$Fst_RioChoy.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,22] = stat_table$Fst_Pachon.Rascon[stat_table$Gene_Name == input_vec[i]]
temp.df[,23] = stat_table$Fst_Rascon.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,24] = stat_table$Fst_Chica1.Chica2[stat_table$Gene_Name == input_vec[i]]
temp.df[,25] = stat_table$TajimasD_RioChoy[stat_table$Gene_Name == input_vec[i]]
temp.df[,26] = stat_table$TajimasD_Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,27] = stat_table$TajimasD_Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,28] = stat_table$TajimasD_Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,29] = stat_table$TajimasD_Rascon[stat_table$Gene_Name == input_vec[i]]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:29] = rep(NA, num_stat_copies)
}
# Check if current gene is found in transcription data. If so, output
# associated information. If not, output NAs
if(input_vec[i] %in% condition_control$Gene_name){
pub_names = append(pub_names,
condition_control$Publication[condition_control$Gene_name == input_vec[i]])
pub_names = pub_names[!is.na(pub_names)]
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))]) != 0){
temp.df[,30] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
temp.df[,34] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,30] = rep(NA, num_stat_copies)
temp.df[,34] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))]) != 0){
temp.df[,31] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
temp.df[,35] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,31] = rep(NA, num_stat_copies)
temp.df[,35] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
}else{
temp.df[,30:37] = rep(NA, num_stat_copies)
}
# Check if current gene is found in morph:morph transcription data.
# If so, output associated information in columns 38-43 and in pub_names
if(input_vec[i] %in% morph1.morph2$Gene_name){
pub_names = append(pub_names,
morph1.morph2$Publication[morph1.morph2$Gene_name == input_vec[i]][1])
pub_names = pub_names[!is.na(pub_names)]
# Check if the current gene has a Pachon-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")]) != 0){
temp.df[,38] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
temp.df[,41] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
}else{
temp.df[,38] = rep(NA, num_stat_copies)
temp.df[,41] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Molino-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")]) != 0){
temp.df[,39] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
temp.df[,42] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
}else{
temp.df[,39] = rep(NA, num_stat_copies)
temp.df[,42] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Tinaja-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")]) != 0){
temp.df[,40] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
temp.df[,43] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
}else{
temp.df[,40] = rep(NA, num_stat_copies)
temp.df[,43] = rep(NA, num_stat_copies)
}
}else{
temp.df[,38:43] = rep(NA, num_stat_copies)
}
# Add pubnames to appropriate column
temp.df[,44] <- paste(pub_names, collapse = "; ")
# Add current temporary dataframe to output dataframe
output.df <- rbind(output.df, temp.df)
}
}
# Remove first row, as it is empty
output.df <- output.df[-1,]
# Output all values obtained for gene(s) of interest
names(output.df) <- c(
"Gene Name",
"Gene Stable ID",
"Scaffold",
"Start Position",
"Stop Position",
"Gene Description",
"GO ID(s)",
"Pi_RioChoy",
"Pi_Pachon",
"Pi_Molino",
"Pi_Tinaja",
"Pi_Rascon",
"Dxy_RioChoy:Pachon",
"Dxy_RioChoy:Molino",
"Dxy_RioChoy:Tinaja",
"Dxy_Rascon:Pachon",
"Dxy_Rascon:Tinaja",
"Dxy_Chica1:Chica2",
"Fst_RioChoy:Pachon",
"Fst_RioChoy:Molino",
"Fst_RioChoy:Tinaja",
"Fst_Pachon:Rascon",
"Fst_Rascon:Tinaja",
"Fst_Chica1:Chica2",
"TajimasD_RioChoy",
"TajimasD_Pachon",
"TajimasD_Molino",
"TajimasD_Tinaja",
"TajimasD_Rascon",
"SD_log(FC)_RioChoy",
"SD_log(FC)_Pachon",
"SD_log(FC)_Molino",
"SD_log(FC)_Tinaja",
"p-value for SD_log(FC)_RioChoy",
"p-value for SD_log(FC)_Pachon",
"p-value for SD_log(FC)_Molino",
"p-value for SD_log(FC)_Tinaja",
"log(FC)_Pachon-RioChoy",
"log(FC)_Molino-RioChoy",
"log(FC)_Tinaja-RioChoy",
"p-value for log(FC)_Pachon-RioChoy",
"p-value for log(FC)_Molino-RioChoy",
"p-value for log(FC)_Tinaja-RioChoy",
"Publications"
)
return(output.df)
}
x <- GeneCentered(input = "mtnr1al, pige")
library(shinyWidgets)
library(shiny)
library(ggplot2)
library(plotly)
library(WVPlots)
library(stringr)
library(tibble)
library(gridExtra)
library(dplyr)
x <- GeneCentered(input = "mtnr1al, pige")
x <- GeneCentered(input = "mtnr1al, pige", position_table = position_table)
x <- GeneCentered(input = "mtnr1al, pige", stat_table = stat_table, condition_control = condition_control, morph1.morph2 = morph1.morph2, GeneToGO = GeneToGO, position_table = position_table)
x <- GeneCentered(input = "mtnr1al, pige", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
x
x <- GeneCentered(input = "mtnr1al, cryba1l1", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
View(x)
x <- GeneCentered(input = "ENSAMXG00000012424, ENSAMXG00000013063", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
x <- GeneCentered(input = "mtnr1al", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
x <- GeneCentered(input = "ENSAMXG00000012424", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
x <- GeneCentered(input = "phosphatidylinositol glycan anchor", stat_table = stat_table, condition_control = condition_control, GeneToGO = GeneToGO, position_table = position_table)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
# Currently, we only have morph:morph comparisons from one study
morph1.morph2 <- read.csv("data/Transcription_Macketal2020.csv")
morph1.morph2 <- morph1.morph2[,-1]
View(morph1.morph2)
morph1.morph2 <- morph1.morph2[!is.na(morph1.morph2$Gene_name),]
write.csv(morph1.morph2, file = "Transcription_Macketal2020.csv")
# Currently, we only have morph:morph comparisons from one study
morph1.morph2 <- read.csv("data/Transcription_Macketal2020.csv")
morph1.morph2 <- morph1.morph2[,-1]
# Currently, we only have morph:morph comparisons from one study
morph1.morph2 <- read.csv("data/Transcription_Macketal2020.csv")
morph1.morph2 <- morph1.morph2[,-1]
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
ncol(x)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
