}else if(!grepl(comma, input)){
if(input %in% c(position_table$Gene_Name, stat_table$Gene_Name,
condition_control$Gene_name)){
# Count how many times this gene occurs in the stat_table
num_stat_copies <- sum(str_count(stat_table$Gene_Name, input))
# If number of copies of gene in statistic data is 0, copy the gene at
# least once so at least one copy is present for transcription data
if(num_stat_copies == 0){
num_stat_copies = 1
}
# Create temporary dataframe to be appended to final
temp.df <- data.frame(matrix(nrow = num_stat_copies, ncol = 38))
# Store input and associated values in appropriate objects and mark input
# as a gene name
temp.df[,1] = rep(input, num_stat_copies)
temp.df[,2] = rep(all.genes_IDs$all_IDs[
all.genes_IDs$all_genes == input], num_stat_copies)
# If the current gene is present in the position table, output position
# table info. If not, output all NA
if(input %in% position_table$Gene_Name){
temp.df[,3] = rep(position_table$Scaffold[
position_table$Gene_Name == input], num_stat_copies)
temp.df[,4] = rep(position_table$Start_Locus[
position_table$Gene_Name == input], num_stat_copies)
temp.df[,5] = rep(position_table$End_Locus[
position_table$Gene_Name == input], num_stat_copies)
}else{
temp.df[,3:5] = rep(NA, num_stat_copies)
}
# Check if gene is present in GO term table. If so, output GO terms. If
# not, output NA
if(input %in% GeneToGO$Gene.names){
temp.df[,7] = rep(GeneToGO$Gene.ontology.IDs[
GeneToGO$Gene.names == input], num_stat_copies)
}else{
temp.df[,7] = rep(NA, num_stat_copies)
}
# Check if gene is present in stat table. If so, output info. If not,
# output NAs
if(input %in% stat_table$Gene_Name){
temp.df[,6] = stat_table$Gene_Description[stat_table$Gene_Name == input]
temp.df[,8] = stat_table$Pi_RioChoy[stat_table$Gene_Name == input]
temp.df[,9] = stat_table$Pi_Pachon[stat_table$Gene_Name == input]
temp.df[,10] = stat_table$Pi_Molino[stat_table$Gene_Name == input]
temp.df[,11] = stat_table$Pi_Tinaja[stat_table$Gene_Name == input]
temp.df[,12] = stat_table$Pi_Rascon[stat_table$Gene_Name == input]
temp.df[,13] = stat_table$Dxy_RioChoy.Pachon[stat_table$Gene_Name == input]
temp.df[,14] = stat_table$Dxy_RioChoy.Molino[stat_table$Gene_Name == input]
temp.df[,15] = stat_table$Dxy_RioChoy.Tinaja[stat_table$Gene_Name == input]
temp.df[,16] = stat_table$Dxy_Rascon.Pachon[stat_table$Gene_Name == input]
temp.df[,17] = stat_table$Dxy_Rascon.Tinaja[stat_table$Gene_Name == input]
temp.df[,18] = stat_table$Dxy_Chica1.Chica2[stat_table$Gene_Name == input]
temp.df[,19] = stat_table$Fst_RioChoy.Pachon[stat_table$Gene_Name == input]
temp.df[,20] = stat_table$Fst_RioChoy.Molino[stat_table$Gene_Name == input]
temp.df[,21] = stat_table$Fst_RioChoy.Tinaja[stat_table$Gene_Name == input]
temp.df[,22] = stat_table$Fst_Pachon.Rascon[stat_table$Gene_Name == input]
temp.df[,23] = stat_table$Fst_Rascon.Tinaja[stat_table$Gene_Name == input]
temp.df[,24] = stat_table$Fst_Chica1.Chica2[stat_table$Gene_Name == input]
temp.df[,25] = stat_table$TajimasD_RioChoy[stat_table$Gene_Name == input]
temp.df[,26] = stat_table$TajimasD_Pachon[stat_table$Gene_Name == input]
temp.df[,27] = stat_table$TajimasD_Molino[stat_table$Gene_Name == input]
temp.df[,28] = stat_table$TajimasD_Tinaja[stat_table$Gene_Name == input]
temp.df[,29] = stat_table$TajimasD_Rascon[stat_table$Gene_Name == input]
temp.df[,38] = stat_table$Publication_Name[stat_table$Gene_Name == input]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:29] = rep(NA, num_stat_copies)
temp.df[,38] = rep(NA, num_stat_copies)
}
# Check if current gene is found in transcription data. If so, output
# associated information. If not, output NAs
if(input %in% condition_control$Gene_name){
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))]) != 0){
temp.df[,30] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
temp.df[,34] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
}else{
temp.df[,30] = rep(NA, num_stat_copies)
temp.df[,34] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))]) != 0){
temp.df[,31] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
temp.df[,35] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
}else{
temp.df[,31] = rep(NA, num_stat_copies)
temp.df[,35] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
}else{
temp.df[,30:37] = rep(NA, num_stat_copies)
}
geneName = T
geneID = F
output.df <- rbind(output.df, temp.df)
}else if(input %in% c(position_table$Gene_ID, stat_table$Stable_Gene_ID,
condition_control$Gene_stable_ID)){
# Count how many times this ID occurs in the stat_table
num_stat_copies <- sum(str_count(stat_table$Stable_Gene_ID, input))
# If number of copies of gene in statistic data is 0, copy the gene at
# least once so at least one copy is present for transcription data
if(num_stat_copies == 0){
num_stat_copies = 1
}
# Create temporary dataframe to later be bound to final df
temp.df <- data.frame(matrix(nrow = num_stat_copies, ncol = 38))
# Store input and associated values in appropriate objects and mark input
# as a gene ID
temp.df[,1] = rep(all.genes_IDs$all_genes[
all.genes_IDs$all_IDs == input], num_stat_copies)
temp.df[,2] = rep(input, num_stat_copies)
# If the current gene is present in the position table, output position
# table info. If not, output all NA
if(temp.df[1,2] %in% position_table$Gene_Name){
temp.df[,3] = rep(position_table$Scaffold[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
temp.df[,4] = rep(position_table$Start_Locus[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
temp.df[,5] = rep(position_table$End_Locus[
position_table$Gene_Name == temp.df[1,2]], num_stat_copies)
}else{
temp.df[,3:5] = rep(NA, num_stat_copies)
}
# Check if gene is present in GO term table. If so, output GO terms. If
# not, output NA
if(temp.df[1,2] %in% GeneToGO$Gene.names){
temp.df[,7] = rep(GeneToGO$Gene.ontology.IDs[
GeneToGO$Gene.names == temp.df[1,2]], num_stat_copies)
}else{
temp.df[,7] = rep(NA, num_stat_copies)
}
# Check if gene is present in stat table. If so, output info. If not,
# output NAs
if(input %in% stat_table$Stable_Gene_ID){
temp.df[,6] = stat_table$Gene_Description[stat_table$Stable_Gene_ID == input]
temp.df[,8] = stat_table$Pi_RioChoy[stat_table$Stable_Gene_ID == input]
temp.df[,9] = stat_table$Pi_Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,10] = stat_table$Pi_Molino[stat_table$Stable_Gene_ID == input]
temp.df[,11] = stat_table$Pi_Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,12] = stat_table$Pi_Rascon[stat_table$Stable_Gene_ID == input]
temp.df[,13] = stat_table$Dxy_RioChoy.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,14] = stat_table$Dxy_RioChoy.Molino[stat_table$Stable_Gene_ID == input]
temp.df[,15] = stat_table$Dxy_RioChoy.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,16] = stat_table$Dxy_Rascon.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,17] = stat_table$Dxy_Rascon.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,18] = stat_table$Dxy_Chica1.Chica2[stat_table$Stable_Gene_ID == input]
temp.df[,19] = stat_table$Fst_RioChoy.Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,20] = stat_table$Fst_RioChoy.Molino[stat_table$Stable_Gene_ID == input]
temp.df[,21] = stat_table$Fst_RioChoy.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,22] = stat_table$Fst_Pachon.Rascon[stat_table$Stable_Gene_ID == input]
temp.df[,23] = stat_table$Fst_Rascon.Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,24] = stat_table$Fst_Chica1.Chica2[stat_table$Stable_Gene_ID == input]
temp.df[,25] = stat_table$TajimasD_RioChoy[stat_table$Stable_Gene_ID == input]
temp.df[,26] = stat_table$TajimasD_Pachon[stat_table$Stable_Gene_ID == input]
temp.df[,27] = stat_table$TajimasD_Molino[stat_table$Stable_Gene_ID == input]
temp.df[,28] = stat_table$TajimasD_Tinaja[stat_table$Stable_Gene_ID == input]
temp.df[,29] = stat_table$TajimasD_Rascon[stat_table$Stable_Gene_ID == input]
temp.df[,38] = stat_table$Publication_Name[stat_table$Stable_Gene_ID == input]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:29] = rep(NA, num_stat_copies)
temp.df[,38] = rep(NA, num_stat_copies)
}
# Check if current gene is found in transcription data. If so, output
# associated information. If not, output NAs
if(input %in% condition_control$Gene_stable_ID){
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Class))]) != 0){
temp.df[,30] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
temp.df[,34] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
}else{
temp.df[,30] = rep(NA, num_stat_copies)
temp.df[,34] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Class))]) != 0){
temp.df[,31] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
temp.df[,35] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
}else{
temp.df[,31] = rep(NA, num_stat_copies)
temp.df[,35] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Class))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_stable_ID == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
}else{
temp.df[,30:37] = rep(NA, num_stat_copies)
}
geneID = T
geneName = F
output.df <- rbind(output.df, temp.df)
}else if(!(input %in% all.genes_IDs$all_genes) &
!(input %in% all.genes_IDs$all_IDs)){
geneName = F
geneID = F
}
}
# If the input string contains NO commas but is not WHOLLY comprised of IDs or
# names, consider the string a phrase
if((!geneID) & (!geneName)){
# Find all gene names whose description, GO terms, or gene name contains the
# phrase-of-interest
# Must first check if phrase is found in any column-of-interest prior to
# appending phrase to column of interest
input_vec <- c()
if((sum(grepl(input, stat_table$Gene_Description)) != 0) |
(sum(grepl(input, stat_table$GO_Terms)) != 0)){
input_vec <- append(input_vec, stat_table$Gene_Name[
(grepl(input, stat_table$Gene_Description)) |
(grepl(input, stat_table$GO_Terms))]
)
}
if((sum(grepl(input, GeneToGO$Gene.ontology..biological.process.)) != 0) |
(sum(grepl(input, GeneToGO$Gene.ontology..cellular.component.)) != 0) |
(sum(grepl(input, GeneToGO$Gene.ontology..molecular.function.)) != 0)){
input_vec <- append(input_vec,
c(GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..biological.process.)
],
GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..cellular.component.)
],
GeneToGO$Gene.names[
grepl(input, GeneToGO$Gene.ontology..molecular.function.)
]
)
)
}
if(sum(grepl(input, all.genes_IDs$all_genes)) != 0){
input_vec <- append(input_vec,
all.genes_IDs$all_genes[grepl(input,
all.genes_IDs$all_genes)])
}
# Remove duplicate genes from input vector
input_vec <- input_vec[!duplicated(input_vec)]
# If no gene descriptions contain the phrase, return an error
if(length(input_vec) == 0){
return(paste(c("ERROR: No genes-of-interest can be described by the phrase",
input), collapse = " "))
}
# For each gene, collect all values associated with the gene
for(i in 1:length(input_vec)){
# Find number of copies of this gene in stat table
num_stat_copies <- sum(str_count(stat_table$Gene_Name, input_vec[i]))
# If number of copies of gene in statistic data is 0, copy the gene at
# least once so at least one copy is present for transcription data
if(num_stat_copies == 0){
num_stat_copies = 1
}
# Create temporary dataframe to be appended to final
temp.df <- data.frame(matrix(nrow = num_stat_copies, ncol = 38))
temp.df[,1] = rep(input_vec[i], num_stat_copies)
if(input_vec[i] %in% all.genes_IDs$all_genes){
temp.df[,2] = rep(all.genes_IDs$all_IDs[
all.genes_IDs$all_genes == input_vec[i]], num_stat_copies)
}else{
temp.df[,2] = rep(NA, num_stat_copies)
}
# If the current gene is present in the position table, output position
# table info. If not, output all NA
if(input_vec[i] %in% position_table$Gene_Name){
temp.df[,3] = rep(position_table$Scaffold[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
temp.df[,4] = rep(position_table$Start_Locus[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
temp.df[,5] = rep(position_table$End_Locus[
position_table$Gene_Name == input_vec[i]], num_stat_copies)
}else{
temp.df[,3:5] = rep(NA, num_stat_copies)
}
# Check if gene is present in GO term table. If so, output GO terms. If
# not, output NA
if(input_vec[i] %in% GeneToGO$Gene.names){
temp.df[,7] = rep(GeneToGO$Gene.ontology.IDs[
GeneToGO$Gene.names == input_vec[i]], num_stat_copies)
}else{
temp.df[,7] = rep(NA, num_stat_copies)
}
# Check if gene is present in stat table. If so, output info. If not,
# output NAs
if(input_vec[i] %in% stat_table$Gene_Name){
temp.df[,6] = stat_table$Gene_Description[stat_table$Gene_Name == input_vec[i]]
temp.df[,8] = stat_table$Pi_RioChoy[stat_table$Gene_Name == input_vec[i]]
temp.df[,9] = stat_table$Pi_Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,10] = stat_table$Pi_Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,11] = stat_table$Pi_Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,12] = stat_table$Pi_Rascon[stat_table$Gene_Name == input_vec[i]]
temp.df[,13] = stat_table$Dxy_RioChoy.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,14] = stat_table$Dxy_RioChoy.Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,15] = stat_table$Dxy_RioChoy.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,16] = stat_table$Dxy_Rascon.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,17] = stat_table$Dxy_Rascon.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,18] = stat_table$Dxy_Chica1.Chica2[stat_table$Gene_Name == input_vec[i]]
temp.df[,19] = stat_table$Fst_RioChoy.Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,20] = stat_table$Fst_RioChoy.Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,21] = stat_table$Fst_RioChoy.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,22] = stat_table$Fst_Pachon.Rascon[stat_table$Gene_Name == input_vec[i]]
temp.df[,23] = stat_table$Fst_Rascon.Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,24] = stat_table$Fst_Chica1.Chica2[stat_table$Gene_Name == input_vec[i]]
temp.df[,25] = stat_table$TajimasD_RioChoy[stat_table$Gene_Name == input_vec[i]]
temp.df[,26] = stat_table$TajimasD_Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,27] = stat_table$TajimasD_Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,28] = stat_table$TajimasD_Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,29] = stat_table$TajimasD_Rascon[stat_table$Gene_Name == input_vec[i]]
temp.df[,38] = stat_table$Publication_Name[stat_table$Gene_Name == input_vec[i]]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:29] = rep(NA, num_stat_copies)
temp.df[,38] = rep(NA, num_stat_copies)
}
# Check if current gene is found in transcription data. If so, output
# associated information. If not, output NAs
if(input_vec[i] %in% condition_control$Gene_name){
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))]) != 0){
temp.df[,30] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
temp.df[,34] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Class))], num_stat_copies)
}else{
temp.df[,30] = rep(NA, num_stat_copies)
temp.df[,34] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))]) != 0){
temp.df[,31] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
temp.df[,35] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Class))], num_stat_copies)
}else{
temp.df[,31] = rep(NA, num_stat_copies)
temp.df[,35] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Class))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Class))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
}else{
temp.df[,30:37] = rep(NA, num_stat_copies)
}
# Add current temporary dataframe to output dataframe
output.df <- rbind(output.df, temp.df)
}
}
# Remove first row, as it is empty
output.df <- output.df[-1,]
# Output all values obtained for gene(s) of interest
names(output.df) <- c(
"Gene Name",
"Gene Stable ID",
"Scaffold",
"Start Position",
"Stop Position",
"Gene Description",
"GO ID(s)",
"Pi_RioChoy",
"Pi_Pachon",
"Pi_Molino",
"Pi_Tinaja",
"Pi_Rascon",
"Dxy_RioChoy:Pachon",
"Dxy_RioChoy:Molino",
"Dxy_RioChoy:Tinaja",
"Dxy_Rascon:Pachon",
"Dxy_Rascon:Tinaja",
"Dxy_Chica1:Chica2",
"Fst_RioChoy:Pachon",
"Fst_RioChoy:Molino",
"Fst_RioChoy:Tinaja",
"Fst_Pachon:Rascon",
"Fst_Rascon:Tinaja",
"Fst_Chica1:Chica2",
"TajimasD_RioChoy",
"TajimasD_Pachon",
"TajimasD_Molino",
"TajimasD_Tinaja",
"TajimasD_Rascon",
"SD_log(FC)_RioChoy",
"SD_log(FC)_Pachon",
"SD_log(FC)_Molino",
"SD_log(FC)_Tinaja",
"p-value for SD_log(FC)_RioChoy",
"p-value for SD_log(FC)_Pachon",
"p-value for SD_log(FC)_Molino",
"p-value for SD_log(FC)_Tinaja",
"Publication Name (Population Genetics Data)"
)
return(output.df)
}
output_table <- GeneCentered(input, stat_table, GeneToGO, condition_control, position_table)
View(output_table)
input = "tmem44, mpdu1b"
output_table <- GeneCentered(input, stat_table, GeneToGO, condition_control, position_table)
View(output_table)
input = "ENSAMXG00000032549, ENSAMXG00000040864"
output_table <- GeneCentered(input, stat_table, GeneToGO, condition_control, position_table)
input = "mannose-P-dolichol"
output_table <- GeneCentered(input, stat_table, GeneToGO, condition_control, position_table)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
class(output.df)
class(temp.df)
typeof(output.df)
typeof(temp.df)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
names(temp.df)
names(output_table)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
input = "ENSAMXG00000032549, ENSAMXG00000040864"
output_table <- GeneCentered(input, stat_table, GeneToGO, condition_control, position_table)
View(output_table)
runApp('CaveCrawler.R')
