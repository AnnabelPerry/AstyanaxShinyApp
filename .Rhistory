temp.df[,27] = stat_table$TajimasD_RioChoy[stat_table$Gene_Name == input_vec[i]]
temp.df[,28] = stat_table$TajimasD_Pachon[stat_table$Gene_Name == input_vec[i]]
temp.df[,29] = stat_table$TajimasD_Molino[stat_table$Gene_Name == input_vec[i]]
temp.df[,30] = stat_table$TajimasD_Tinaja[stat_table$Gene_Name == input_vec[i]]
temp.df[,31] = stat_table$TajimasD_Rascon[stat_table$Gene_Name == input_vec[i]]
}else{
temp.df[,6] = rep(NA, num_stat_copies)
temp.df[,8:31] = rep(NA, num_stat_copies)
}
# Check if current gene is found in transcription data. If so, output
# associated information. If not, output NAs
if(input_vec[i] %in% condition_control$Gene_name){
pub_names = append(pub_names,
condition_control$Publication[condition_control$Gene_name == input_vec[i]])
pub_names = pub_names[!is.na(pub_names)]
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))]) != 0){
temp.df[,32] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
temp.df[,36] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Choy",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,32] = rep(NA, num_stat_copies)
temp.df[,36] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))]) != 0){
temp.df[,33] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
temp.df[,37] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Pachon",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,33] = rep(NA, num_stat_copies)
temp.df[,37] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))]) != 0){
temp.df[,34] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
temp.df[,38] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Molino",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,34] = rep(NA, num_stat_copies)
temp.df[,38] = rep(NA, num_stat_copies)
}
if(length(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))]) != 0){
temp.df[,35] = rep(condition_control$logFC[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
temp.df[,39] = rep(condition_control$PValue[
(condition_control$Gene_name == input_vec[i]) &
(grepl("Tinaja",condition_control$Comparison))], num_stat_copies)
}else{
temp.df[,35] = rep(NA, num_stat_copies)
temp.df[,39] = rep(NA, num_stat_copies)
}
}else{
temp.df[,32:39] = rep(NA, num_stat_copies)
}
# Check if current gene is found in morph:morph transcription data.
# If so, output associated information in columns 38-43 and in pub_names
if(input_vec[i] %in% morph1.morph2$Gene_name){
pub_names = append(pub_names,
morph1.morph2$Publication[morph1.morph2$Gene_name == input_vec[i]][1])
pub_names = pub_names[!is.na(pub_names)]
# Check if the current gene has a Pachon-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")]) != 0){
temp.df[,40] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
temp.df[,43] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Pachon-Rio Choy")], num_stat_copies)
}else{
temp.df[,40] = rep(NA, num_stat_copies)
temp.df[,43] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Molino-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")]) != 0){
temp.df[,41] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
temp.df[,44] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Molino-Rio Choy")], num_stat_copies)
}else{
temp.df[,41] = rep(NA, num_stat_copies)
temp.df[,44] = rep(NA, num_stat_copies)
}
# Check if the current gene has a Tinaja-RC comparison
if(length(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")]) != 0){
temp.df[,42] = rep(morph1.morph2$logFC[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
temp.df[,45] = rep(morph1.morph2$PValue[
(morph1.morph2$Gene_name == input_vec[i]) &
(morph1.morph2$Comparison == "Tinaja-Rio Choy")], num_stat_copies)
}else{
temp.df[,42] = rep(NA, num_stat_copies)
temp.df[,45] = rep(NA, num_stat_copies)
}
}else{
temp.df[,40:45] = rep(NA, num_stat_copies)
}
# Add pubnames to appropriate column
temp.df[,46] <- paste(pub_names, collapse = "; ")
# Add current temporary dataframe to output dataframe
output.df <- rbind(output.df, temp.df)
}
}
# Remove first row, as it is empty
output.df <- output.df[-1,]
# Output all values obtained for gene(s) of interest
names(output.df) <- c(
"Gene Name",
"Gene Stable ID",
"Scaffold",
"Start Position",
"Stop Position",
"Gene Description",
"GO ID(s)",
"Pi_RioChoy",
"Pi_Pachon",
"Pi_Molino",
"Pi_Tinaja",
"Pi_Rascon",
"Dxy_RioChoy:Pachon",
"Dxy_RioChoy:Molino",
"Dxy_RioChoy:Tinaja",
"Dxy_Rascon:Pachon",
"Dxy_Rascon:Molino",
"Dxy_Rascon:Tinaja",
"Dxy_Chica1:Chica2",
"Fst_RioChoy:Pachon",
"Fst_RioChoy:Molino",
"Fst_RioChoy:Tinaja",
"Fst_Pachon:Rascon",
"Fst_Rascon:Molino",
"Fst_Rascon:Tinaja",
"Fst_Chica1:Chica2",
"TajimasD_RioChoy",
"TajimasD_Pachon",
"TajimasD_Molino",
"TajimasD_Tinaja",
"TajimasD_Rascon",
"SD_log(FC)_RioChoy",
"SD_log(FC)_Pachon",
"SD_log(FC)_Molino",
"SD_log(FC)_Tinaja",
"p-value for SD_log(FC)_RioChoy",
"p-value for SD_log(FC)_Pachon",
"p-value for SD_log(FC)_Molino",
"p-value for SD_log(FC)_Tinaja",
"log(FC)_Pachon-RioChoy",
"log(FC)_Molino-RioChoy",
"log(FC)_Tinaja-RioChoy",
"p-value for log(FC)_Pachon-RioChoy",
"p-value for log(FC)_Molino-RioChoy",
"p-value for log(FC)_Tinaja-RioChoy",
"Publications"
)
return(output.df)
}
GeneCentered(input = "jak1", stat_table, GeneToGO, condition_control,
position_table)
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
library(shiny); runApp('CaveCrawler.R')
morph1 = "Pachon"
morph2 = "Rio Choy"
condition = "Downregulated"
direction = "Downregulated"
condition = "Between morph"
percent = 10
GOTable = GeneToGO
GeneToGO <- read.csv("data/AMexGOTerms.csv", fill = T)
# If condition is NOT "Between morph"...
if(condition != "Between morph"){
# Use transcription data of morph-control comparisons
in_table <- condition_control
# Set morph2 to control
morph2 <- "Control"
# Set grep pattern to morph1
search_cond <- morph1
# If searching between morphs, set search condition to morphs-of-comparison
}else if(condition == "Between morph"){
# Use transcription data for between-morph comparisons
in_table <- morph1.morph2
# Set grep pattern to comparison
search_cond <- paste(c(morph1, morph2), collapse = "-")
}
# Store comparison for output. Note: "morph2" is control if "Between morph"
# was not entered
comp <- paste(c(morph1, morph2), collapse = "-")
# Find all rows-of-interest (ROIs) for morph-of-interest where genes are
# downregulated, condition matches the input specification, and p-value is
# less than 0.05
ROIs <- in_table[(grepl(search_cond, in_table$Comparison)
& (in_table$logFC < 0) &
(in_table$Condition == condition)), ]
ROIs
ROIs$Gene_stable_ID[i]
grep(ROIs$Gene_stable_ID[i], GeneToGO$Ensembl)
length(grep(ROIs$Gene_stable_ID[i], GeneToGO$Ensembl))
GeneToGO$Ensembl[1]
position_table <- read.csv("data/AmexPositionTable.csv", fill = TRUE)
# Remove duplicates so multiple rows with the same values are not outputted
position_table$Gene_Name <- tolower(position_table$Gene_Name)
position_table <- position_table[!duplicated(position_table$Gene_Name),]
condition_control <- read.csv("data/Morph_Control_TranscData.csv")
condition_control <- condition_control[,-1]
condition_control$Publication <- rep("5", nrow(condition_control))
# Currently, we only have morph:morph comparisons from one study
morph1.morph2 <- read.csv("data/Transcription_Macketal2020.csv")
morph1.morph2 <- morph1.morph2[,-1]
morph1.morph2$Publication <- rep("4", nrow(morph1.morph2))
GeneToGO <- read.csv("data/AMexGOTerms.csv", fill = T)
GeneToGO$Gene.names <- tolower(GeneToGO$Gene.names)
names(GeneToGO)[1] <- "Entry"
GeneToGO <- GeneToGO[!is.na(GeneToGO$Gene.ontology.IDs),]
GeneToGO <- GeneToGO[!duplicated(GeneToGO$Ensembl_GeneID),]
GoIDToNames <- read.table("data/GOIDs_and_Names.txt", fill = T, sep = "\t", header = T)
# When you first read in GoIDToNames, some entire lines are, for whatever reason,
# combined into a single GO term cell
# This section of the script...
# 1. Identifies all GO term cells containing information from multiple lines
messed_cells <- GoIDToNames$GO.Term[grepl("\n", GoIDToNames$GO.Term)]
# 2. Splices the cells into strings based on newline characters and adds strings
#    to a vector
newline_strings <- c()
sites.of.errors <- c()
for(c in 1:length(messed_cells)){
newline_strings <- append(newline_strings, str_split(string = messed_cells[c],
pattern = "\n"))
sites.of.errors <- append(sites.of.errors,
which(GoIDToNames$GO.Term == messed_cells[c]))
}
error.replacements <- c()
for(i in 1:length(newline_strings)){
# 3. Records sites at which an erroneous GO term must be replaced with a
#    corrected GO term
error.replacements <- append(error.replacements, newline_strings[[i]][1])
newline_strings[[i]] <- newline_strings[[i]][-1]
# 4. Splices the strings of the vector into substrings based on \t and adds
#    substring pairs as columns to a temporary dataframe
temp_df <- data.frame(matrix(ncol = 2, nrow = 1))
new_rows <- str_split(string = newline_strings[[i]], pattern = "\t")
for(r in 1:length(new_rows)){
temp_df <- rbind(temp_df, new_rows[[r]])
}
temp_df <- temp_df[-1,]
names(temp_df) <- names(GoIDToNames)
# 5. Inserts the temporary data frame into the master data frame
GoIDToNames <- rbind(GoIDToNames, temp_df)
next
}
# 6. Replaces the erroneous GO term with a corrected GO term
GoIDToNames$GO.Term[sites.of.errors] <- error.replacements
UpperLower <- read.table("data/GOTermAssociations.txt", fill = T, sep = "\t", header = T)
# Integrate all datasets describing Fst, Dxy, Pi, and Tajima's D into a single
# dataframe, adding a column describing the publication from which the data came
HS11 <- read.csv("data/Herman_etal_2018_S11.csv")
names(HS11)[1] <- "Stable_Gene_ID"
HS11$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS11))
HS11$Fst_Chica1.Chica2 <- rep(NA, nrow(HS11))
HS11$Publication <- rep("1", nrow(HS11))
HS13 <- read.csv("data/Herman_etal_2018_S13.csv")
names(HS13)[1] <- "Stable_Gene_ID"
HS13$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Fst_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Publication <- rep("1", nrow(HS13))
chica_table <- read.csv("data/AMexicanus_iScienceS4R1_Stats.csv")
# Add columns not present in Chica table
chica_table$Fst_Rascon.Molino <- rep(NA, nrow(chica_table))
chica_table$Dxy_Rascon.Molino <- rep(NA, nrow(chica_table))
# Move columns to match positions in Herman tables
chica_table <- relocate(chica_table, c(27, 28), .after = "TajimasD_Rascon")
chica_table$Publication <- rep("2", nrow(chica_table))
# Ensure name compatibility before combining
names(chica_table) <- names(HS11)
stat_table <- rbind(HS11, HS13)
stat_table <- rbind(stat_table, chica_table)
stat_table <- stat_table[(!is.na(stat_table$Gene_Name) &
(stat_table$Gene_Name != "") &
(stat_table$Gene_Name != " ")),]
stat_table$Gene_Name <- tolower(stat_table$Gene_Name)
GO_classes <- read.table("data/GOID_Namespaces.txt", fill = T, sep = "\t", header = T)
# Obtain complete dataframe of all possible genes and corresponding IDs across
# the statistic and transcription data
all.genes_IDs <- data.frame(
all_genes = c(position_table$Gene_Name, stat_table$Gene_Name,
condition_control$Gene_name
),
all_IDs = c(position_table$Gene_ID, stat_table$Stable_Gene_ID,
condition_control$Gene_stable_ID
)
)
all.genes_IDs <- all.genes_IDs[!duplicated(all.genes_IDs[,2]),]
all.genes_IDs <- all.genes_IDs[!duplicated(all.genes_IDs[,1]),]
# Obtain a complete vector of all GO IDs
all.GO_IDs <- c(GO_classes$GO_ID)
all.GO_IDs <- all.GO_IDs[!duplicated(all.GO_IDs)]
######################## GO Term Analysis ######################################
double_hits <- c("crybb1l1",
"ap1s1",
"clec19a",
"caln1",
"lim2.3",
"tspan18b",
"lctlb",
"lim2.1",
"cplx4a",
"slc9a3r2"
)
double_IDs <- all.genes_IDs$all_IDs[all.genes_IDs$all_genes %in% double_hits]
double_GOs <- GeneToGO$Gene.ontology..molecular.function.[GeneToGO$Ensembl_GeneID %in% double_IDs]
obj_10 <- "structural constituent of eye lens [GO:0005212]"
hits <- c()
for(i in 1:500000){
sample(GeneToGO$Gene.ontology..molecular.function., 10)->curhits
hits[i] <- sum(curhits == obj_10)
}
hist(hits)
sum(hits>0)
p.1 <- sum(hits>0)/500000
p.1 <- sum(hits>0)/500000
p.1
for(i in 1:1000000){
sample(GeneToGO$Gene.ontology..molecular.function., 10)->curhits
hits[i] <- sum(curhits == obj_10)
}
hist(hits)
sum(hits>0)
sum(hits==2)
sum(hits==3)
p.2 <- sum(hits>=2)/500000
p.2
library(shiny); runApp('CaveCrawler.R')
input = "crybgx, cryba4, crygn2, crybb1l1, cryba1l1, pde6ha, bfsp2, es1, si:dkey-57a22.15, si:dkey-57a22.13, zgc:112285, gje1, crybb1l3, lim2.1, si:rp71-39b20.4, cryaa, slc25a3a, rnf180 (1 of 2), gja3 (1 of 2), rho, pde6c, lim2.5, endou2, nrl, lgsn, slc24a2, cnga1b, rsad2, lctla, arr3a, guca1a, rdh8, cabp5a, nr2e3, grk7a, zgc:195245, plcxd2, ckmt2 (1 of many), opn1lw1, slc16a8, kcnv2a, sv2ba, opn6a, si:ch211-163l21.11, dsp (2 of 2), aifm2, pde6b, gc2, si:ch211-81a5.8, pde6a, ubap1la, oca2, tulp1a, si:dkey-220f10.4, c7b, si:ch1073-469d17.2, arl3l1, rhol, cabp2a, samd7, gja8a, si:ch211-203k16.3, prss35, camkk1b, gja8b, si:dkey-72l14.3, mab21l3, cplx4a, minpp1a, unc119.2, irgq2, prom1b, rgs9a, ppef2, si:dkey-206f10.1, si:dkey-7k24.5, arl13a, cacng3a, cx52.6, prpf19, zgc:162144, si:ch73-29l19.1, mettl11b, samd15, crygmx, gngt1, si:ch211-13f8.1, snx19a, si:ch211-261n11.8, rnf182, prph2l, trpm1a, guk1b, bokb, gucy2d, cdhr1a, reep6, cx52.7, kcnj2b, ppm1na, gabra6a, si:dkey-283b15.2, cx52.9, cnga3b, six7, cryba1a, slc1a8a, rgrb, si:dkey-177p2.18, rdh8b, grm6b, plekhb1, lactbl1b, gabrr3a, si:ch211-132f19.7, neu4, si:ch211-276a17.5, paqr4b, grk1b, galr1, cacna2d4b, pde6g, fam163b, upb1 (1 of 2), igsf9b, 1-Mar, opn4.1, lactbl1a, mpp4l, si:ch73-6k14.2, zgc:165604, ndufv1, rrh, comtd1, slc1a7a, btbd17b, scn12aa, abcg1, valopb, c3a.1, opn1mw1, kcnv2b, tkta, cyp4v7, gpib, ahr1b, si:dkey-94f20.4, pam16, cry1b, sept4a, plch2b, si:ch73-173p19.2, si:dkey-94e7.2, pard3bb, gabrr1, hexa, cbln8, paqr7a, zmp:0000001048, parapinopsinb, opn4b, slc5a1, arl15a, zgc:162331, zgc:194990, cryba2a, zgc:153441, gpr89b, slc1a8b, clcnk, atp2b1b, fkbp16, ankrd6a, tspan18b, grik1b, crx, tgm2, prph2la, mon1ba, rxfp3.3a1, rpgrip1, zgc:77752, si:ch211-113j13.2, slc12a5a, isl2b, treh, efhc2, ablim1a, si:ch211-117m20.4, cdc14a, cfap99, mtnr1bb, nrxn3b, gabrb1, glra4b, lctlb, cacna1fb, foxo6b, si:dkey-197i20.6, antxr1c, opn9, bco2l, arl3l2, slc6a1l, polr2e, atoh7, nol7, aglb, ntsr1, c1ql1 (2 of 2), shank2a, slc1a9, gbp1, si:ch211-194p6.7, rem2, lppr5a, aanat1, si:ch211-283g2.1, cry1ba, prlhr2a, zgc:171482, itprip, usp21, fscn2b, pou6f2, trpm1b, cox7a1, uba5, rbp4l, zgc:110045, si:dkey-71h2.2, grik5, hcn1, camk1gb, pex6, tspan10, fezf2, tyrp1b, hcrtr2, foxg1b, abca4a, ncald, gabrr2a, ncanb, tyrp1a, pde4ca, smtlb, abca4b, vps52, htr7c, atp9a, bicdl1, gria4b, inpp5kb, ek1, si:ch211-255g12.6, fibcd1, mlana, si:ch211-233f11.5 (2 of 4), shc1, mymk, map7a, aqp8a.2, kcnk17, chrnb3b, vax2, si:ch211-195b15.7, ptpdc1b, flot1b, glmnb, vsx2, kctd16b, fam160a1b, si:ch211-39a7.1, radil, neurod4, gria3b, si:ch73-380n15.2, si:rp71-79p20.2, tnr, hdac6, tyr, fam107a, lct, tmprss5, rpe65a, iqsec3b, akt3a, chadlb, si:dkey-11o18.5, zgc:153352, pmela, eif3m, kcnh5a, ptchd3, gnb3a, ly6pge, impdh1a, adam23, gdf3, foxn4, fra10ac1, gpm6ba, lpin1, cnnm1, fyco1a, itln1, tmem132d, inaa, asb14a, lim2.3, pfkmb, epx, pax6a, slc12a5b, dct, zgc:112332, cables2b, kcnk10a, nr1d4a, tlx1, dgke, ypel2, zgc:109949, si:dkey-33c12.3, pdk2b, ptgr2, mpp4a, wee2, gpr143, evi5a, mpp5b, cep72, slc46a3, aqp4, kcna4, mblac1, caln1, hs3st4, si:dkey-181m9.8, gabrb3, tnnt2d, dlgap2a, slc15a5, slc45a2, ppef2, phkg1b, si:zfos-911d5.4, vdrb, rx1, b3gat1a, tbxas1, col28a1b, dyrk4, fam161a, birc7, avpr2ab, tph1a, si:dkey-222b8.4, cacnb2b, rapgef4, lmod2a, dhrs13b (1 of 2), adss1, msgn1, pdha1b, sox14, tlcd1 (1 of many), si:dkey-152b24.6, ptx4, eif3eb, slc6a17, slc9a3r2, si:dkey-73n8.3, mfsd2b, raver1, si:dkey-219c10.4, cpne2, tkt, ctsl.1, pgam1b, mep1b, zgc:194202, si:ch211-149b19.2, srrm3, banp, eno1b, kcnh3, ppp1r3db, lingo1a, si:dkey-191g9.5, insyn2a, slc29a4, chst8, slc38a5b, adgrg7, negr1, si:dkey-23n7.10, p4htm, atg4a, jph3, nosip, cul3b, adcy1b, mdga1, nrtn, ict1, kifap3b, frmpd4, ube2o, irx6a, syt7a, trim67, kitb, chrnb5b, lipib, fbxl16, dhx32b, rxfp3, sparcl1, xkr6a, rlbp1b, bmb, spsb3b, grin3ba, zdhhc8, grm6a, tbc1d32, lrp8, klhl33, ampd1, fam13c, ap1s1, best4, cdh5, casp23, slc5a8, c5, robo3, zgc:101566, prkcbb, epha6, clec19a, txlnbb, grin3a, ccdc170, grik1a, cobl, agxtb, hnf4b, stra6, kcnj3b, selenou1b, tmtops2b, crtac1a, pkma, si:ch73-74h11.1, ttyh1, pygma, 2-Oct, wfs1a, naa20, wdr24, rxrgb, gucy2f, oscp1a (1 of 2), gabbr1a, col28a1a, pptc7b, sv2bb, eml1, six3a, si:dkey-190l8.2, elk4, lim2.2, anp32a, si:dkey-193b15.8, st3gal1l3 (3 of 3), c8g, klhdc8b, cyp46a1.3, mindy1, f5, gabrg2, bbs1, fbp2, zgc:172271, cdh22, wdcp, tp53, si:dkeyp-41f9.3, slc6a6b, nek7, mib2, efr3ba, grin2cb, thrb, cfap157, fam166b, wnt7bb"
)
""
input = "crybgx, cryba4, crygn2, crybb1l1, cryba1l1, pde6ha, bfsp2, es1, si:dkey-57a22.15, si:dkey-57a22.13, zgc:112285, gje1, crybb1l3, lim2.1, si:rp71-39b20.4, cryaa, slc25a3a, rnf180 (1 of 2), gja3 (1 of 2), rho, pde6c, lim2.5, endou2, nrl, lgsn, slc24a2, cnga1b, rsad2, lctla, arr3a, guca1a, rdh8, cabp5a, nr2e3, grk7a, zgc:195245, plcxd2, ckmt2 (1 of many), opn1lw1, slc16a8, kcnv2a, sv2ba, opn6a, si:ch211-163l21.11, dsp (2 of 2), aifm2, pde6b, gc2, si:ch211-81a5.8, pde6a, ubap1la, oca2, tulp1a, si:dkey-220f10.4, c7b, si:ch1073-469d17.2, arl3l1, rhol, cabp2a, samd7, gja8a, si:ch211-203k16.3, prss35, camkk1b, gja8b, si:dkey-72l14.3, mab21l3, cplx4a, minpp1a, unc119.2, irgq2, prom1b, rgs9a, ppef2, si:dkey-206f10.1, si:dkey-7k24.5, arl13a, cacng3a, cx52.6, prpf19, zgc:162144, si:ch73-29l19.1, mettl11b, samd15, crygmx, gngt1, si:ch211-13f8.1, snx19a, si:ch211-261n11.8, rnf182, prph2l, trpm1a, guk1b, bokb, gucy2d, cdhr1a, reep6, cx52.7, kcnj2b, ppm1na, gabra6a, si:dkey-283b15.2, cx52.9, cnga3b, six7, cryba1a, slc1a8a, rgrb, si:dkey-177p2.18, rdh8b, grm6b, plekhb1, lactbl1b, gabrr3a, si:ch211-132f19.7, neu4, si:ch211-276a17.5, paqr4b, grk1b, galr1, cacna2d4b, pde6g, fam163b, upb1 (1 of 2), igsf9b, 1-Mar, opn4.1, lactbl1a, mpp4l, si:ch73-6k14.2, zgc:165604, ndufv1, rrh, comtd1, slc1a7a, btbd17b, scn12aa, abcg1, valopb, c3a.1, opn1mw1, kcnv2b, tkta, cyp4v7, gpib, ahr1b, si:dkey-94f20.4, pam16, cry1b, sept4a, plch2b, si:ch73-173p19.2, si:dkey-94e7.2, pard3bb, gabrr1, hexa, cbln8, paqr7a, zmp:0000001048, parapinopsinb, opn4b, slc5a1, arl15a, zgc:162331, zgc:194990, cryba2a, zgc:153441, gpr89b, slc1a8b, clcnk, atp2b1b, fkbp16, ankrd6a, tspan18b, grik1b, crx, tgm2, prph2la, mon1ba, rxfp3.3a1, rpgrip1, zgc:77752, si:ch211-113j13.2, slc12a5a, isl2b, treh, efhc2, ablim1a, si:ch211-117m20.4, cdc14a, cfap99, mtnr1bb, nrxn3b, gabrb1, glra4b, lctlb, cacna1fb, foxo6b, si:dkey-197i20.6, antxr1c, opn9, bco2l, arl3l2, slc6a1l, polr2e, atoh7, nol7, aglb, ntsr1, c1ql1 (2 of 2), shank2a, slc1a9, gbp1, si:ch211-194p6.7, rem2, lppr5a, aanat1, si:ch211-283g2.1, cry1ba, prlhr2a, zgc:171482, itprip, usp21, fscn2b, pou6f2, trpm1b, cox7a1, uba5, rbp4l, zgc:110045, si:dkey-71h2.2, grik5, hcn1, camk1gb, pex6, tspan10, fezf2, tyrp1b, hcrtr2, foxg1b, abca4a, ncald, gabrr2a, ncanb, tyrp1a, pde4ca, smtlb, abca4b, vps52, htr7c, atp9a, bicdl1, gria4b, inpp5kb, ek1, si:ch211-255g12.6, fibcd1, mlana, si:ch211-233f11.5 (2 of 4), shc1, mymk, map7a, aqp8a.2, kcnk17, chrnb3b, vax2, si:ch211-195b15.7, ptpdc1b, flot1b, glmnb, vsx2, kctd16b, fam160a1b, si:ch211-39a7.1, radil, neurod4, gria3b, si:ch73-380n15.2, si:rp71-79p20.2, tnr, hdac6, tyr, fam107a, lct, tmprss5, rpe65a, iqsec3b, akt3a, chadlb, si:dkey-11o18.5, zgc:153352, pmela, eif3m, kcnh5a, ptchd3, gnb3a, ly6pge, impdh1a, adam23, gdf3, foxn4, fra10ac1, gpm6ba, lpin1, cnnm1, fyco1a, itln1, tmem132d, inaa, asb14a, lim2.3, pfkmb, epx, pax6a, slc12a5b, dct, zgc:112332, cables2b, kcnk10a, nr1d4a, tlx1, dgke, ypel2, zgc:109949, si:dkey-33c12.3, pdk2b, ptgr2, mpp4a, wee2, gpr143, evi5a, mpp5b, cep72, slc46a3, aqp4, kcna4, mblac1, caln1, hs3st4, si:dkey-181m9.8, gabrb3, tnnt2d, dlgap2a, slc15a5, slc45a2, ppef2, phkg1b, si:zfos-911d5.4, vdrb, rx1, b3gat1a, tbxas1, col28a1b, dyrk4, fam161a, birc7, avpr2ab, tph1a, si:dkey-222b8.4, cacnb2b, rapgef4, lmod2a, dhrs13b (1 of 2), adss1, msgn1, pdha1b, sox14, tlcd1 (1 of many), si:dkey-152b24.6, ptx4, eif3eb, slc6a17, slc9a3r2, si:dkey-73n8.3, mfsd2b, raver1, si:dkey-219c10.4, cpne2, tkt, ctsl.1, pgam1b, mep1b, zgc:194202, si:ch211-149b19.2, srrm3, banp, eno1b, kcnh3, ppp1r3db, lingo1a, si:dkey-191g9.5, insyn2a, slc29a4, chst8, slc38a5b, adgrg7, negr1, si:dkey-23n7.10, p4htm, atg4a, jph3, nosip, cul3b, adcy1b, mdga1, nrtn, ict1, kifap3b, frmpd4, ube2o, irx6a, syt7a, trim67, kitb, chrnb5b, lipib, fbxl16, dhx32b, rxfp3, sparcl1, xkr6a, rlbp1b, bmb, spsb3b, grin3ba, zdhhc8, grm6a, tbc1d32, lrp8, klhl33, ampd1, fam13c, ap1s1, best4, cdh5, casp23, slc5a8, c5, robo3, zgc:101566, prkcbb, epha6, clec19a, txlnbb, grin3a, ccdc170, grik1a, cobl, agxtb, hnf4b, stra6, kcnj3b, selenou1b, tmtops2b, crtac1a, pkma, si:ch73-74h11.1, ttyh1, pygma, 2-Oct, wfs1a, naa20, wdr24, rxrgb, gucy2f, oscp1a (1 of 2), gabbr1a, col28a1a, pptc7b, sv2bb, eml1, six3a, si:dkey-190l8.2, elk4, lim2.2, anp32a, si:dkey-193b15.8, st3gal1l3 (3 of 3), c8g, klhdc8b, cyp46a1.3, mindy1, f5, gabrg2, bbs1, fbp2, zgc:172271, cdh22, wdcp, tp53, si:dkeyp-41f9.3, slc6a6b, nek7, mib2, efr3ba, grin2cb, thrb, cfap157, fam166b, wnt7bb"
library(shiny); runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
library(shiny); runApp('CaveCrawler.R')
library(shiny); runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
cwd()
wd()
temp_df <- data.frame(matrix(ncol=ncol(GeneSearchOutput)))
names(temp_df) <- names(GeneSearchOutput)
# Find all genes overlapping between Herman and transcription
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
all_genes <- read.csv("GeneSearch-11-26-combinedCSVs.csv")
overlap_genes <- all_genes[!is.na(all_genes$log.FC._Pachon.RioChoy),]
# Remove NAs for Fst and logFC
overlap_genes$log.FC._Pachon.RioChoy <- as.numeric(overlap_genes$log.FC._Pachon.RioChoy)
overlap_genes$log.FC._Molino.RioChoy <- as.numeric(overlap_genes$log.FC._Molino.RioChoy)
overlap_genes$log.FC._Tinaja.RioChoy <- as.numeric(overlap_genes$log.FC._Tinaja.RioChoy)
overlap_genes$p.value.for.log.FC._Pachon.RioChoy <- as.numeric(overlap_genes$p.value.for.log.FC._Pachon.RioChoy)
overlap_genes <- overlap_genes[!is.na(overlap_genes$p.value.for.log.FC._Pachon.RioChoy),]
overlap_genes$Fst_RioChoy.Pachon <- as.numeric(overlap_genes$Fst_RioChoy.Pachon)
overlap_genes <- overlap_genes[!is.na(overlap_genes$Fst_RioChoy.Pachon),]
overlap_genes$p.value.for.log.FC._Molino.RioChoy <- as.numeric(overlap_genes$p.value.for.log.FC._Molino.RioChoy)
overlap_genes <- overlap_genes[!is.na(overlap_genes$p.value.for.log.FC._Molino.RioChoy),]
overlap_genes$Fst_RioChoy.Molino <- as.numeric(overlap_genes$Fst_RioChoy.Molino)
overlap_genes <- overlap_genes[!is.na(overlap_genes$Fst_RioChoy.Molino),]
overlap_genes$p.value.for.log.FC._Tinaja.RioChoy <- as.numeric(overlap_genes$p.value.for.log.FC._Tinaja.RioChoy)
overlap_genes <- overlap_genes[!is.na(overlap_genes$p.value.for.log.FC._Tinaja.RioChoy),]
overlap_genes$Fst_RioChoy.Tinaja <- as.numeric(overlap_genes$Fst_RioChoy.Tinaja)
overlap_genes <- overlap_genes[!is.na(overlap_genes$Fst_RioChoy.Tinaja),]
# Add column for all significant loci
for(i in 1:nrow(overlap_genes)){
if(overlap_genes$p.value.for.log.FC._Pachon.RioChoy[i] <= 0.05){
overlap_genes$Significant_Pachon[i] <- "Yes"
}else{
overlap_genes$Significant_Pachon[i] <- "No"
}
if(overlap_genes$p.value.for.log.FC._Molino.RioChoy[i] <= 0.05){
overlap_genes$Significant_Molino[i] <- "Yes"
}else{
overlap_genes$Significant_Molino[i] <- "No"
}
if(overlap_genes$p.value.for.log.FC._Tinaja.RioChoy[i] <= 0.05){
overlap_genes$Significant_Tinaja[i] <- "Yes"
}else{
overlap_genes$Significant_Tinaja[i] <- "No"
}
if((overlap_genes$p.value.for.log.FC._Pachon.RioChoy[i] <= 0.05)
&
(overlap_genes$p.value.for.log.FC._Molino.RioChoy[i] <= 0.05)
&
(overlap_genes$p.value.for.log.FC._Tinaja.RioChoy[i] <= 0.05)
){
overlap_genes$Significant_All[i] <- "Yes"
}else{
overlap_genes$Significant_All[i] <- "No"
}
}
setwd("C:/Users/knigh/Documents/GitHub/AstyanaxShinyApp")
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
temp_df <- data.frame(matrix(ncol=ncol(GeneSearchOutput)))
setwd("~/Fall 2021/Capstone/AnalysisFiles")
######### Double-check that you're including ALL and ONLY outlier genes ########
# Of the genes outputted by population genetics, find all the ones for which you
# are missing transcription data
setwd("~/Fall 2021/Capstone/AnalysisFiles")
PopGenOutput <- read.csv("CaveCrawler-Outliers-AllFstAllMorphs.csv")
# Find all genes overlapping between Herman and transcription
setwd("~/Fall 2021/Capstone/AnalysisFiles/GeneSearch-CSVs-11-26")
GeneSearchOutput <- read.csv("GeneSearch-11-26-combinedCSVs.csv")
# Convert all parentheticals to just gene names
library(stringr)
for(i in 1:length(PopGenOutput$Gene.Name)){
if(length(grep("of", PopGenOutput$Gene.Name[i])) != 0){
temp <- str_split(PopGenOutput$Gene.Name[i], fixed(" ("))
PopGenOutput$Gene.Name[i] <- temp[[1]][1]
}else{
next
}
}
missing_genes <- PopGenOutput$Gene.Name[!(PopGenOutput$Gene.Name %in% GeneSearchOutput$Gene.Name)]
temp_df <- data.frame(matrix(ncol=ncol(GeneSearchOutput)))
names(temp_df) <- names(GeneSearchOutput)
# Obtain the transcription and popgen data for the missing genes and add to data
# frame
setwd("C:/Users/knigh/Documents/GitHub/AstyanaxShinyApp")
# Integrate all datasets describing Fst, Dxy, Pi, and Tajima's D into a single
# dataframe, adding a column describing the publication from which the data came
HS11 <- read.csv("data/Herman_etal_2018_S11.csv")
names(HS11)[1] <- "Stable_Gene_ID"
HS11$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS11))
HS11$Fst_Chica1.Chica2 <- rep(NA, nrow(HS11))
HS11$Fst_Outliers <- rep(NA, nrow(HS11))
HS11$Publication <- rep("1", nrow(HS11))
HS13 <- read.csv("data/Herman_etal_2018_S13.csv")
names(HS13)[1] <- "Stable_Gene_ID"
HS13$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Fst_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Publication <- rep("1", nrow(HS13))
chica_table <- read.csv("data/AMexicanus_iScienceS4R1_Stats.csv")
# Add columns not present in Chica table
chica_table$Fst_Rascon.Molino <- rep(NA, nrow(chica_table))
chica_table$Dxy_Rascon.Molino <- rep(NA, nrow(chica_table))
# Move columns to match positions in Herman tables
chica_table <- relocate(chica_table, c(27, 28), .after = "TajimasD_Rascon")
chica_table$Fst_Outliers <- rep(NA, nrow(chica_table))
chica_table$Publication <- rep("2", nrow(chica_table))
# Ensure name compatibility before combining
names(chica_table) <- names(HS11)
library(shinyWidgets)
library(shiny)
library(ggplot2)
library(plotly)
library(WVPlots)
library(stringr)
library(tibble)
library(gridExtra)
library(dplyr)
chica_table <- read.csv("data/AMexicanus_iScienceS4R1_Stats.csv")
# Add columns not present in Chica table
chica_table$Fst_Rascon.Molino <- rep(NA, nrow(chica_table))
chica_table$Dxy_Rascon.Molino <- rep(NA, nrow(chica_table))
# Move columns to match positions in Herman tables
chica_table <- relocate(chica_table, c(27, 28), .after = "TajimasD_Rascon")
chica_table$Fst_Outliers <- rep(NA, nrow(chica_table))
# Move columns to match positions in Herman tables
# Move columns to match positions in Herman tables
chica_
# Move columns to match positions in Herman tables
chica_table <- relocate(chica_table, c(27, 28), .after = "TajimasD_Rascon")
chica_table$Fst_Outliers <- rep(NA, nrow(chica_table))
chica_table$Publication <- rep("2", nrow(chica_table))
# Ensure name compatibility before combining
names(chica_table) <- names(HS11)
stat_table <- rbind(HS11, HS13)
HS13 <- read.csv("data/Herman_etal_2018_S13.csv")
names(HS13)[1] <- "Stable_Gene_ID"
HS13$Dxy_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Fst_Chica1.Chica2 <- rep(NA, nrow(HS13))
HS13$Publication <- rep("1", nrow(HS13))
# Ensure name compatibility before combining
names(chica_table) <- names(HS11)
stat_table <- rbind(HS11, HS13)
stat_table <- rbind(stat_table, chica_table)
stat_table <- stat_table[(!is.na(stat_table$Gene_Name) &
(stat_table$Gene_Name != "") &
(stat_table$Gene_Name != " ")),]
stat_table$Gene_Name <- tolower(stat_table$Gene_Name)
stat_table
stat_table[!is.na(stat_table$Fst_Outliers),]
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
