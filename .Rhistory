stat_table,
all_pops = c("Molino","Rio Choy")
)
all_pops[1, pair]
all_pops[2, pair]
list(paste(paste(c("Statistic ",stat_vec[s],
" is not present for the populations ",
all_pops[1, pair]," and ",
all_pops[2, pair]),collapse = "")),
null.df)
s
StatByChrTable <- function(GOTerm, GeneToGo, GoIDToNames, UpperLower, stat_vec, position_table, stat_table, all_pops){
# Initialize vector for all GO terms of interest
GOs <- c()
# Initialize vector in which to store warnings
wrnings <- c("Notes: ")
# Check if user inputted a word/phrase or a GO ID. If the user inputted a
# word/phrase, find the name(s) which contains that word/phrase and set the GO
# vector equal to the corresponding GO IDs.
if(!(GOTerm %in% GoIDToNames$GO.ID)){
GOs <- GoIDToNames$GO.ID[which(grepl(GOTerm, GoIDToNames$GO.Term,
ignore.case = T))]
# If user inputted a GO ID, add that ID
}else if(GOTerm %in% GoIDToNames$GO.ID){
GOs <- GOTerm
}
# Find all GO terms which are LOWER than the GO terms in the GO vector.
# First, loop through each GO ID in the vector-of-GOs. As more GO IDs, are
# added to the vector, the number of remaining iterations will increase.
for(g in 1:length(GOs)){
# Add all "Lower" GO IDs which occur on a row where the current vector entry
# is an "Upper" to the vector of GO IDs, then move to the next GO ID
if(GOs[g] %in% UpperLower$Upper){
GOs <- append(GOs, UpperLower$Lower[UpperLower$Upper == GOs[g]])
# If the current GO ID does NOT occur anywhere in the "Upper" column, skip it
}else{
next
}
}
# Find all genes associated with the current GO IDs and add to vector of genes
gene_vec <- c()
found_GOs <- c()
for(g in 1:length(GOs)){
# If the GO term appears in the data frame of names AND the corresponding gene
# occurs in the statistics vector, add the GO term and gene name
if(GOs[g] %in% GeneToGO$Gene.ontology.IDs){
gene_vec <- append(gene_vec, GeneToGO$Gene.names[grepl(GOs[g], GeneToGO$Gene.ontology.IDs)])
found_GOs <- append(found_GOs, rep(GOs[g], length(gene_vec)))
# If the GO term does NOT appear in the dataframe of names, skip it
}else{
next
}
}
geneGOs <- data.frame(
Gene = gene_vec,
GO_ID = found_GOs
)
geneGOs <- geneGOs[!duplicated(geneGOs), ]
# Extract all possible combinations of populations from populations of interest
if((is.vector(all_pops)) & (length(all_pops) > 1)){
all_pops <- combn(all_pops,2)
}
# Create vectors in which to store values for later dataframe
Statistic_Type_prelim <- c()
Population_prelim <- c()
Statistic_Value_prelim <- numeric()
for(s in 1:length(stat_vec)){
# Check if statistic of interest makes comparisons between TWO populations
if((stat_vec[s] == "Fst") | (stat_vec[s] == "Dxy")){
# Check if pops is a matrix
if(is.matrix(all_pops)){
# If so, iterate through each combination and output stat value for that
# combination
for(pair in 1:ncol(all_pops)){
# If pops is a matrix, read the strings, find the column corresponding
# to the stat of interest for the populations in the vector, and set
# "index" equal to the column housing this statistic
val <- which(grepl(all_pops[1, pair], names(stat_table))
& grepl(all_pops[2, pair], names(stat_table))
& grepl(stat_vec[s], names(stat_table)))
# If statistic for populations-of-interest is not present, add a
# warning
if(length(val) == 0){
wrnings <- append(wrnings, paste(c("Statistic ",stat_vec[s],
" is not present for the populations ",
all_pops[1, pair]," and ",
all_pops[2, pair], " | "),collapse = ""))
# If these populations-of-interest are the only pops which were
# inputted, return a warning
if(ncol(all_pops)){
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
return(list(paste(paste(c("Statistic ",stat_vec[s],
" is not present for the populations ",
all_pops[1, pair]," and ",
all_pops[2, pair]),collapse = "")),
null.df))
}
}else{
# Create a row to add to the indices dataframe
temp_str <- paste(c(all_pops[1, pair],"-",all_pops[2, pair]),
collapse = "")
Statistic_Type_prelim <- append(Statistic_Type_prelim,stat_vec[s])
Population_prelim <- append(Population_prelim,temp_str)
Statistic_Value_prelim <- append(Statistic_Value_prelim,val)
}
# If pops is NOT a matrix, return an error
}
}else if(!is.matrix(all_pops)){
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
return(list(paste(c("Warning: Only one population, ", all_pops,
", supplied for the two-population statistic ",
stat_vec[s], "."),
collapse = ""), null.df))
# Check if statistic of interest makes comparisons between ONE population
}
}else if((stat_vec[s] == "TajimasD") | (stat_vec[s] == "Pi")){
# Iterate through each individual population
for(p in 1:length(all_pops)){
# If pops is a string, set indx equal to the column housing the stat of
# interest for this population
val <- which(grepl(all_pops[p], names(stat_table))
& grepl(stat_vec[s], names(stat_table)))
# If statistic for populations-of-interest is not present, return a
# warning
if(length(val) == 0){
wrnings <- append(wrnings, paste(c("Statistic ",stat_vec[s],
" is not present for the population ",
all_pops[p], " | "), collapse = ""))
}else{
# Create a row to add to the indices dataframe
Statistic_Type_prelim <- append(Statistic_Type_prelim,stat_vec[s])
Population_prelim <- append(Population_prelim,all_pops[p])
Statistic_Value_prelim <- append(Statistic_Value_prelim,val)
}
}
}
}
# For each GO Term in the vector of GO Terms-of-interest, find...
# 1. All gene names which occur in the positions table AND in the statistics
#    table
# 2. The scaffolds of those genes
# 3. The starting positions of those genes
# 4. The ending positions of those genes
# 5. The GO terms associated with those genes
# 6. Each of the 4 statistic types
# 7. Each of the populations/population combinations
# 8. Each of the statistical values
# For each statistic-population pair, iterate through each gene and find the
# statistic value, scaffold, starting position, and ending position and
# output to a dataframe
Gene <- c()
Scaffold <- c()
Start_Position <- c()
End_Position <- c()
GO_IDs <- c()
Statistic_Type <- c()
Population <- c()
Statistic_Value <- c()
for(s in 1:length(Statistic_Type_prelim)){
for(g in 1:length(geneGOs$Gene)){
# Check if current gene is in stat AND position table
# If so...
if((geneGOs$Gene[g] %in% stat_table$Gene_Name) &
(geneGOs$Gene[g] %in% position_table$Gene_Name)){
# Output the current gene
Gene <- append(Gene, geneGOs$Gene[g])
# Output scaffold of current gene
Scaffold <- append(Scaffold,
position_table$Scaffold[position_table$Gene_Name == geneGOs$Gene[g]])
# Output starting position of the current gene
Start_Position <- append(Start_Position,
position_table$Start_Locus[position_table$Gene_Name == geneGOs$Gene[g]])
# Output the ending position of the current gene
End_Position <- append(End_Position,
position_table$End_Locus[position_table$Gene_Name == geneGOs$Gene[g]])
# Output ALL GO terms associated with the current gene
GO_IDs <- append(GO_IDs,
paste(geneGOs$GO_ID[geneGOs$Gene == geneGOs$Gene[g]], collapse = "; "))
# Output the current statistic type
Statistic_Type <- append(Statistic_Type, Statistic_Type_prelim[s])
# Output the population(s)
Population <- append(Population, Population_prelim[s])
# Output the statistic value
Statistic_Value <- append(Statistic_Value,
stat_table[stat_table$Gene_Name == geneGOs$Gene[g],
Statistic_Value_prelim[s]])
# If not, skip the gene
}else{
next
}
}
}
output_df <- data.frame(Gene,
Scaffold,
Start_Position,
End_Position,
GO_IDs,
Statistic_Type,
Population,
Statistic_Value
)
return(list(wrnings, output_df))
}
StatByChrTable(GOTerm = "GO:0035639",
GeneToGO,
GoIDToNames,
UpperLower,
stat_vec = c("Fst"),
position_table,
stat_table,
all_pops = c("Molino","Rio Choy")
)
library(shiny); runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
runApp('CaveCrawler.R')
list(paste(c("ERROR: Statistic ",stat_vec[s],
" is not present for any of the input populations",
collapse = "")), null.df)
StatByChrTable <- function(GOTerm, GeneToGo, GoIDToNames, UpperLower, stat_vec, position_table, stat_table, all_pops){
# Initialize vector for all GO terms of interest
GOs <- c()
# Initialize vector in which to store warnings
wrnings <- c("Notes: ")
# Check if user inputted a word/phrase or a GO ID. If the user inputted a
# word/phrase, find the name(s) which contains that word/phrase and set the GO
# vector equal to the corresponding GO IDs.
if(!(GOTerm %in% GoIDToNames$GO.ID)){
GOs <- GoIDToNames$GO.ID[which(grepl(GOTerm, GoIDToNames$GO.Term,
ignore.case = T))]
# If user inputted a GO ID, add that ID
}else if(GOTerm %in% GoIDToNames$GO.ID){
GOs <- GOTerm
}
# Find all GO terms which are LOWER than the GO terms in the GO vector.
# First, loop through each GO ID in the vector-of-GOs. As more GO IDs, are
# added to the vector, the number of remaining iterations will increase.
for(g in 1:length(GOs)){
# Add all "Lower" GO IDs which occur on a row where the current vector entry
# is an "Upper" to the vector of GO IDs, then move to the next GO ID
if(GOs[g] %in% UpperLower$Upper){
GOs <- append(GOs, UpperLower$Lower[UpperLower$Upper == GOs[g]])
# If the current GO ID does NOT occur anywhere in the "Upper" column, skip it
}else{
next
}
}
# Find all genes associated with the current GO IDs and add to vector of genes
gene_vec <- c()
found_GOs <- c()
for(g in 1:length(GOs)){
# If the GO term appears in the data frame of names AND the corresponding gene
# occurs in the statistics vector, add the GO term and gene name
if(GOs[g] %in% GeneToGO$Gene.ontology.IDs){
gene_vec <- append(gene_vec, GeneToGO$Gene.names[grepl(GOs[g], GeneToGO$Gene.ontology.IDs)])
found_GOs <- append(found_GOs, rep(GOs[g], length(gene_vec)))
# If the GO term does NOT appear in the dataframe of names, skip it
}else{
next
}
}
geneGOs <- data.frame(
Gene = gene_vec,
GO_ID = found_GOs
)
geneGOs <- geneGOs[!duplicated(geneGOs), ]
# Extract all possible combinations of populations from populations of interest
if((is.vector(all_pops)) & (length(all_pops) > 1)){
all_pops <- combn(all_pops,2)
}
# Create vectors in which to store values for later dataframe
Statistic_Type_prelim <- c()
Population_prelim <- c()
Statistic_Value_prelim <- numeric()
for(s in 1:length(stat_vec)){
# Check if statistic of interest makes comparisons between TWO populations
if((stat_vec[s] == "Fst") | (stat_vec[s] == "Dxy")){
# Check if pops is a matrix
if(is.matrix(all_pops)){
# If so, iterate through each combination and output stat value for that
# combination
for(pair in 1:ncol(all_pops)){
# If pops is a matrix, read the strings, find the column corresponding
# to the stat of interest for the populations in the vector, and set
# "index" equal to the column housing this statistic
val <- which(grepl(all_pops[1, pair], names(stat_table))
& grepl(all_pops[2, pair], names(stat_table))
& grepl(stat_vec[s], names(stat_table)))
# If statistic for populations-of-interest is not present, add a
# warning
if(length(val) == 0){
wrnings <- append(wrnings, paste(c("Statistic ",stat_vec[s],
" is not present for the populations ",
all_pops[1, pair]," and ",
all_pops[2, pair], " | "),collapse = ""))
# If these populations-of-interest are the only pops which were
# inputted, return a warning
if(ncol(all_pops) == 1){
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
return(list(paste(paste(c("Statistic ",stat_vec[s],
" is not present for the populations ",
all_pops[1, pair]," and ",
all_pops[2, pair]),collapse = "")),
null.df))
}
}else{
# Create a row to add to the indices dataframe
temp_str <- paste(c(all_pops[1, pair],"-",all_pops[2, pair]),
collapse = "")
Statistic_Type_prelim <- append(Statistic_Type_prelim,stat_vec[s])
Population_prelim <- append(Population_prelim,temp_str)
Statistic_Value_prelim <- append(Statistic_Value_prelim,val)
}
# If pops is NOT a matrix, return an error
}
}else if(!is.matrix(all_pops)){
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
return(list(paste(c("ERROR: Only one population, ", all_pops,
", supplied for the two-population statistic ",
stat_vec[s], "."),
collapse = ""), null.df))
# Check if statistic of interest makes comparisons between ONE population
}
}else if((stat_vec[s] == "TajimasD") | (stat_vec[s] == "Pi")){
# Iterate through each individual population
for(p in 1:length(all_pops)){
# If pops is a string, set indx equal to the column housing the stat of
# interest for this population
val <- which(grepl(all_pops[p], names(stat_table))
& grepl(stat_vec[s], names(stat_table)))
# If statistic for populations-of-interest is not present, return a
# warning
if(length(val) == 0){
wrnings <- append(wrnings, paste(c("Statistic ",stat_vec[s],
" is not present for the population ",
all_pops[p], " | "), collapse = ""))
}else{
# Create a row to add to the indices dataframe
Statistic_Type_prelim <- append(Statistic_Type_prelim,stat_vec[s])
Population_prelim <- append(Population_prelim,all_pops[p])
Statistic_Value_prelim <- append(Statistic_Value_prelim,val)
}
}
}
}
# If NONE of the populations-of-interest had values for the statistics-of-
# interest, output an error
if(is.null(Statistic_Type_prelim)){
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
return(list("ERROR: None of the input statistics are present for any of the input populations",
null.df))
}
# For each GO Term in the vector of GO Terms-of-interest, find...
# 1. All gene names which occur in the positions table AND in the statistics
#    table
# 2. The scaffolds of those genes
# 3. The starting positions of those genes
# 4. The ending positions of those genes
# 5. The GO terms associated with those genes
# 6. Each of the 4 statistic types
# 7. Each of the populations/population combinations
# 8. Each of the statistical values
# For each statistic-population pair, iterate through each gene and find the
# statistic value, scaffold, starting position, and ending position and
# output to a dataframe
Gene <- c()
Scaffold <- c()
Start_Position <- c()
End_Position <- c()
GO_IDs <- c()
Statistic_Type <- c()
Population <- c()
Statistic_Value <- c()
for(s in 1:length(Statistic_Type_prelim)){
for(g in 1:length(geneGOs$Gene)){
# Check if current gene is in stat AND position table
# If so...
if((geneGOs$Gene[g] %in% stat_table$Gene_Name) &
(geneGOs$Gene[g] %in% position_table$Gene_Name)){
# Output the current gene
Gene <- append(Gene, geneGOs$Gene[g])
# Output scaffold of current gene
Scaffold <- append(Scaffold,
position_table$Scaffold[position_table$Gene_Name == geneGOs$Gene[g]])
# Output starting position of the current gene
Start_Position <- append(Start_Position,
position_table$Start_Locus[position_table$Gene_Name == geneGOs$Gene[g]])
# Output the ending position of the current gene
End_Position <- append(End_Position,
position_table$End_Locus[position_table$Gene_Name == geneGOs$Gene[g]])
# Output ALL GO terms associated with the current gene
GO_IDs <- append(GO_IDs,
paste(geneGOs$GO_ID[geneGOs$Gene == geneGOs$Gene[g]], collapse = "; "))
# Output the current statistic type
Statistic_Type <- append(Statistic_Type, Statistic_Type_prelim[s])
# Output the population(s)
Population <- append(Population, Population_prelim[s])
# Output the statistic value
Statistic_Value <- append(Statistic_Value,
stat_table[stat_table$Gene_Name == geneGOs$Gene[g],
Statistic_Value_prelim[s]])
# If not, skip the gene
}else{
next
}
}
}
output_df <- data.frame(Gene,
Scaffold,
Start_Position,
End_Position,
GO_IDs,
Statistic_Type,
Population,
Statistic_Value
)
return(list(wrnings, output_df))
}
StatByChrTable(GOTerm = "GO:0035639",
GeneToGO,
GoIDToNames,
UpperLower,
stat_vec = c("Fst"),
position_table,
stat_table,
all_pops = c("Molino","Rio Choy")
)
StatByChrTable(GOTerm = "GO:0035639",
GeneToGO,
GoIDToNames,
UpperLower,
stat_vec = c("Fst"),
position_table,
stat_table,
all_pops = c("Molino","Rio Choy","Pachon")
)
StatByChrTable(GOTerm = "GO:0035639",
GeneToGO,
GoIDToNames,
UpperLower,
stat_vec = c("Fst","Dxy"),
position_table,
stat_table,
all_pops = c("Molino","Rio Choy","Pachon")
)
StatByChrTable(GOTerm = "GO:0035639",
GeneToGO,
GoIDToNames,
UpperLower,
stat_vec = c("Pi"),
position_table,
stat_table,
all_pops = c("Molino","Rio Choy","Pachon")
)
null.df <- data.frame(matrix(nrow = 1, ncol = 8))
names(null.df) <- c("Gene",
"Scaffold",
"Start_Position",
"End_Position",
"GO_IDs",
"Statistic_Type",
"Population",
"Statistic_Value")
is.na(null.df)
if(is.na(null.df)){print("True")}else{print("work on it")}
if(null.df == data.frame(matrix(nrow = 1, ncol = 8))){print("True")}else{print("work on it")}
if(is.na(null.df[1,1])){print("True")}else{print("work on it")}
(is.na(null.df[1,1]) & (nrow(null.df) == 1)
)
(is.na(null.df[1,1])) & (nrow(null.df) == 1)
(is.na(SBCT()[[2]][1,1])) & (nrow(SBCT()[[2]]) == 1)
runApp('CaveCrawler.R')
